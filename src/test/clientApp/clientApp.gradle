
buildscript {
	repositories {
		jcenter()
		mavenLocal()
		mavenCentral()
		maven { url "https://plugins.gradle.org/m2/" }
	}
	dependencies {

	}
}

apply plugin: plugin.bom
apply plugin: plugin.boot
apply plugin: 'java'


configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

bootJar {
	manifest {
		attributes("Created-By"             : "Gradle ${gradle.gradleVersion}",
				"Specification-Title"    : "OperatorFabric Businessconfig Parties Manager",
				"Implementation-Title"   : "OperatorFabric Businessconfig Parties Manager",
				"Implementation-Version" : operatorfabric.version,
				"Specification-Version"  : operatorfabric.version,
				'Main-Class': 'org.opfab.client.ClientApplication'
		)
	}
}

dependencies {
	implementation boot.starterWeb
	implementation "org.opfab:cards-client-data:${project.version}"

	annotationProcessor misc.lombok
	implementation project(':tools:generic:utilities'), project(':tools:spring:spring-utilities')
	testImplementation boot.starterTest
}

test {
	useJUnitPlatform()
}

// If the version is a release, the necessary client jars can be taken from Maven Central.
if (project.version.endsWith("RELEASE")) {
	dependencies {
		implementation project(':client:cards-client-data') // Temporary: This was causing an issue with the release as the corresponding jars are not available yet.
	}
} else { // In the case of a SNAPSHOT version however, the jars won't be available on central
	// If signing key info is set up in the gradle.properties file, the client jars should be signed and published to
	// maven local then used
	if(project.hasProperty('signing.gnupg.keyName')) {
		dependencies {
			implementation "org.opfab:cards-client-data:${project.version}"
		}
		tasks.compileJava.dependsOn ':client:cards-client-data:publishToMavenLocal'
	} else { // Otherwise, just do a plain gradle dependency on the client project
		dependencies {
			implementation project(':client:cards-client-data')
		}
	}
}

