<!-- Copyright (c) 2022-2023, RTE (http://www.rte-france.com)              -->
<!-- See AUTHORS.txt                                                       -->
<!-- This Source Code Form is subject to the terms of the Mozilla Public   -->
<!-- License, v. 2.0. If a copy of the MPL was not distributed with this   -->
<!-- file, You can obtain one at http://mozilla.org/MPL/2.0/.              -->
<!-- SPDX-License-Identifier: MPL-2.0                                      -->
<!-- This file is part of the OperatorFabric project.                      -->

<br />
<h2 style="text-align: center;"> {{card.data.question}} </h2>

<br />
<div id="confirmation-response" style="width:100%;display:flex;flex-wrap:wrap">  
    <div class="opfab-select" style="flex-basis:0;width:20%;position:relative;flex-grow:1;">
        <label for="confirm" style="z-index: 100;"> Confirm </label>
        <select id="resp_confirm" name="confirm">
            <option  value="YES">YES</option>
            <option  value="NO">NO</option>
        </select>

    </div>
    <div class="opfab-input" style="flex-basis:0;width:100%;position:relative;flex-grow:1;margin-left:20px">
        <label> Comment </label>
        <input id="resp_message" name="message" style="width:100%" >
    </div>
</div>


<br/>
<div id="childs-div"></div>
<br/>
 <div id="entities-div"> </div>
<br/>
 <div id="response-entity-div"> </div>


<script>


    userCardTemplate = {
        
        init: function() {
            this.disableResponseIfNotInRealTimeContext();
            this.initOpfabAPI();
            this.loadEntitiesList();
            this.loadEntityUsedForResponse();
        },

        disableResponseIfNotInRealTimeContext: function() {
            if (opfab.currentCard.getDisplayContext() != 'realtime' ) {
                document.getElementById("resp_confirm").disabled = true;
                document.getElementById("resp_message").disabled = true;
            }
        },

        initOpfabAPI: function() { 

            opfab.currentCard.listenToChildCards(() => {
                let childsDiv = document.getElementById("childs-div");

                if (opfab.currentCard.getChildCards()[0]) {
                    let responses = ' <h3>Responses received </h3><center> <br/>'
                    responses += ' <table width="100%""> <tr> <th> Entity </th>';
                    responses += ' <th> Confirmed </th>';
                    responses += ' <th> Comment </th>';
                    responses += ' </tr>';

                    opfab.currentCard.getChildCards().forEach((c, i) => {
                        responses += `<tr> <td> ${opfab.users.entities.getEntityName(c.publisher)} </td>`
                        responses += `<td> ${opfab.utils.escapeHtml(c.data.confirm)} </td>`;
                        responses += `<td> ${opfab.utils.escapeHtml(c.data.message)} </td>`;
                        responses += "</tr>";
                    });

                    responses += '</table> </center> <br/> <br/>';
 
                    childsDiv.innerHTML = responses;
                } else {
                    childsDiv.innerHTML = '';
                }
            });

            opfab.currentCard.registerFunctionToGetUserResponse(() => {
                var confirm = document.getElementById('resp_confirm').value;
                const message = document.getElementById('resp_message').value;
                let publisher = null;
                // WARNING: this setting is just for specific cypress test
                if (message == 'Cypress test for response publisher') publisher = "ENTITY2_FR";
                
                const responseCardData = { 
                        confirm: confirm,
                        message: message
                    };
                return {
                    valid: true,
                    publisher : publisher,
                    responseCardData: responseCardData
                };

            });

            templateGateway.lockAnswer = function() {
                document.getElementById('confirmation-response').style['visibility'] = 'hidden';
            };

            templateGateway.unlockAnswer = function() {
                document.getElementById('confirmation-response').style['visibility'] = 'visible';
            };
        },

        loadEntitiesList: function() {
            let entitiesDiv = document.getElementById("entities-div");
            let text = "Entities allowed to respond : ";
            let entities = opfab.currentCard.getEntitiesAllowedToRespond();
            entities.forEach( 
                id => {
                    text += "&nbsp; &nbsp; &nbsp;";
                    text +=  opfab.utils.escapeHtml(opfab.users.entities.getEntityName(id));
                    }
            );
            // if it is in card preview (usercard) , the template gateway does not contain the list 
            // so we show nothing
            if (entities.length>0) entitiesDiv.innerHTML = text;
        },

        loadEntityUsedForResponse: function() {
            let responseEntityDiv = document.getElementById("response-entity-div");
            let responseEntity = opfab.currentCard.getEntityUsedForUserResponse();
            let userAllowedToRespond = opfab.currentCard.isUserAllowedToRespond();
            if (userAllowedToRespond && responseEntity) 
                responseEntityDiv.innerHTML = "Entity used by user to respond : " + opfab.users.entities.getEntityName(responseEntity);         
        }
    }
     
    userCardTemplate.init();

</script>

</p>