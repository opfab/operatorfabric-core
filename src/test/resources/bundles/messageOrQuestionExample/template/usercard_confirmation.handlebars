
<!-- Copyright (c) 2022-2023, RTE (http://www.rte-france.com)              -->
<!-- See AUTHORS.txt                                                       -->
<!-- This Source Code Form is subject to the terms of the Mozilla Public   -->
<!-- License, v. 2.0. If a copy of the MPL was not distributed with this   -->
<!-- file, You can obtain one at http://mozilla.org/MPL/2.0/.              -->
<!-- SPDX-License-Identifier: MPL-2.0                                      -->
<!-- This file is part of the OperatorFabric project.                      -->

<div class="opfab-input">
     <label id="label"> QUESTION </label>
    <input id="question" name="question" style="width:100%" value="{{card.data.question}}">
</div>
<br/>
 <p>YOUR RESPONSE:</p>
<div style="width:100%;display:flex;flex-wrap:wrap">  
    <div class="opfab-select" style="flex-basis:0;width:20%;position:relative;flex-grow:1;">
        <label for="confirm"> CONFIRM </label>
        <select id="confirm" name="confirm">
            <option id="yes" value="YES" {{conditionalAttribute (bool card.data.confirm '==' 'YES') 'selected'}}>YES</option>
            <option id="no" value="NO" {{conditionalAttribute (bool card.data.confirm '==' 'NO') 'selected'}}>NO</option>
        </select>
    </div>
    <div class="opfab-input" style="flex-basis:0;width:100%;position:relative;flex-grow:1;margin-left:20px">
        <label> COMMENT </label>
        <input id="message" name="message" style="width:100%" value="{{card.data.message}}">
    </div>
</div>

<script>

    userCardTemplate = {
        init: function() {
            this.showCurrentUserResponse();
            this.changeLabelInEditionMode();
            this.setInitialDates();
            this.initTemplateGatewayMethod();
        },


        changeLabelInEditionMode: function() {
            // keep deprecated method for cypress test only
            if (usercardTemplateGateway.getEditionMode() == 'EDITION') {
                const question = document.getElementById('label').innerHTML = ' QUESTION (New) ';
            }
        },

        setInitialDates: function() {
            var mystartDate = new Date();
            mystartDate.setTime(mystartDate.getTime()+ 3600000);
            mystartDate.setMinutes(0);
            mystartDate.setSeconds(0);
            opfab.currentUserCard.setInitialStartDate(mystartDate.getTime());
            opfab.currentUserCard.setInitialEndDate(mystartDate.getTime() + 8 * 3600000);

            // keep deprecated method for cypress test only
            usercardTemplateGateway.setInitialLttd(mystartDate.getTime() + 4 * 3600000);
        },

        showCurrentUserResponse: function(){
            if (opfab.currentUserCard.getUserEntityChildCard()) {
                if (opfab.currentUserCard.getUserEntityChildCard().data.confirm == 'YES') {
                    document.getElementById('yes').selected=true;
                    document.getElementById('no').selected=false;
                } else {
                    document.getElementById('yes').selected=false;
                    document.getElementById('no').selected=true;
                }
                // keep deprecated method for cypress test only
                document.getElementById('message').value=usercardTemplateGateway.getUserEntityChildCardFromCurrentCard().data.message;
            }
        },

        initTemplateGatewayMethod: function() {
            opfab.currentUserCard.registerFunctionToGetSpecificCardInformation( () => {
                const question = document.getElementById('question').value;
                if (question.length <1) return {
                    valid: false,
                    errorMsg : "You must provide a question"
                }
                const confirm = document.getElementById('confirm').value;     
                const message = document.getElementById('message').value;
                
                let publisher = null;
                // WARNING: this setting is just for specific cypress test
                if (message == 'Cypress test for response publisher') publisher = "ENTITY2_FR";

                const card = {
                    summary: { key: "confirmation.summary" },
                    title: { key: "confirmation.title" },
                    severity: "ACTION",
                    data: {
                        question: question,
                        confirm: confirm,
                        message: message
                    }
                };

                const childCard = {
                    summary: { key: "confirmation.summary" },
                    title: { key: "confirmation.title" },
                    publisher : publisher,
                    data: {
                        question: question,
                        confirm: confirm,
                        message: message
                    }
                };

                return {
                    valid: true,
                    card: card,
                    childCard: childCard,
                    viewCardInCalendar: false
                };
            });
        }
    }
    
    userCardTemplate.init();


</script>