<!-- Copyright (c) 2021-2024, RTE (http://www.rte-france.com)              -->
<!-- See AUTHORS.txt                                                       -->
<!-- This Source Code Form is subject to the terms of the Mozilla Public   -->
<!-- License, v. 2.0. If a copy of the MPL was not distributed with this   -->
<!-- file, You can obtain one at http://mozilla.org/MPL/2.0/.              -->
<!-- SPDX-License-Identifier: MPL-2.0                                      -->
<!-- This file is part of the OperatorFabric project.                      -->


<button id="opfabAPI-display-spinner-button" type="button"  
        onclick="simulateCardProcessing()">Simulate card processing</button>


<br>
<br>

<H3> USER CONTEXT VALUES </H3>

<div> userContext.login : <span id="userContext-login" >{{userContext.login}}</span> </div>
<div> userContext.token : <span id="userContext-token" >{{userContext.token}}</span> </div>
<div> userContext.firstName : <span id="userContext-firstName" >{{userContext.firstName}}</span> </div>
<div> userContext.lastName : <span id="userContext-lastName" >{{userContext.lastName}}</span> </div>
<div> userContext.groups : <span id="userContext-groups" >{{userContext.groups}}</span> </div>
<div> userContext.entities : <span id="userContext-entities" >{{userContext.entities}}</span> </div>

<br>
<H3> TEMPLATE GATEWAY CALLS</H3>

<div id="opfabApiResults"></div>

<div> screenSize : <span id="screenSize"> </span>  </div>
<div> onTemplateRenderingComplete : <span id="opfab-currentCard-onTemplateRenderingComplete"> </span>  </div>

<H3> OPFAB CALLS</H3>
<div><span id="showCardLink" style="cursor:pointer;color:rgb(19, 85, 170);text-decoration:underline;" onclick="opfab.navigate.showCardInFeed('defaultProcess.process1')">LINK TO ANOTHER CARD</span></div>

<H3> HANDLEBARS TEMPLATING </H3>

<div> Simple Data  : <span id="handlebars-simpleData" >{{card.data.message}}</span></div>
<div> If feature :<span id="handlebars-if" >{{#if card.data.message}}ok{{/if}}</span>  </div>
<div> Each feature : <span id="handlebars-each">{{#each card.data.array}}{{this}}{{/each}}</span> 
</div>

<div> Card id : <a onclick="opfab.navigate.showCardInFeed('{{card.id}}')"><span id="cardId">{{card.id}}</span></a></div>
<div> Card uid : <span id="cardUid">{{card.uid}}</span></div>
<div>Card severity: <span id="severityColor">{{example_severityColor card.severity}}</span></div>
<script>




loadData();

function loadData() {
    
  let opfabApiResults = document.getElementById("opfabApiResults");
  
  let responses = '<div> getEntityName("ENTITY1_FR") : <span id="opfab-users-entities-getEntityName">';
  responses += opfab.users.entities.getEntityName('ENTITY1_FR');
  responses += '</span></div>';

  responses += '<div> getEntityName("unknownEntity") : <span id="opfab-users-entities-getEntityName-unknownEntity">';
  responses += opfab.users.entities.getEntityName('unknownEntity');
  responses += '</span></div>';


  responses += '<div> isUserAllowedToRespond() : <span id="opfab-currentCard-isUserAllowedToRespond">';
  responses += opfab.currentCard.isUserAllowedToRespond();
  responses += '</span></div>';

  responses += '<div> isUserMemberOfAnEntityRequiredToRespond() : <span id="opfab-currentCard-isUserMemberOfAnEntityRequiredToRespond">';
  responses += opfab.currentCard.isUserMemberOfAnEntityRequiredToRespond();
  responses += '</span></div>';

  responses += '<div> getEntitiesUsableForUserResponse() : <span id="opfab-currentCard-getEntitiesUsableForUserResponse">';
  responses += opfab.currentCard.getEntitiesUsableForUserResponse();
  responses += '</span></div>';

  responses += '<div> getDisplayContext() : <span id="opfab-currentCard-getDisplayContext">';
  responses += opfab.currentCard.getDisplayContext();
  responses += '</span></div>';

  responses += '<div> getAllEntities() : <span id="opfab-users-entities-getAllEntities">';
  opfab.users.entities.getAllEntities().forEach((entity, i) => {
      responses += '<br>entity[' + i + ']:' + 'id=' + entity.id + ',';
      responses += 'name=' + entity.name + ',';
      responses += 'description=' + entity.description + ',';
      responses += 'roles=' + entity.roles + ',';
      responses += 'parents=' + entity.parents + ',';
      responses += 'labels=' + entity.labels;
      }
    );
  responses += '</span></div>';

  responses += '<div> getEntity("ENTITY1_FR") : <span id="opfab-users-entities-getEntity-ENTITY1_FR">';
  responses += opfab.users.entities.getEntity('ENTITY1_FR').id + ',';
  responses += opfab.users.entities.getEntity('ENTITY1_FR').name + ',';
  responses += opfab.users.entities.getEntity('ENTITY1_FR').description + ',';
  responses += opfab.users.entities.getEntity('ENTITY1_FR').roles + ',';
  responses += opfab.users.entities.getEntity('ENTITY1_FR').parents+ ',';
  responses += opfab.users.entities.getEntity('ENTITY1_FR').labels;
  responses += '</span></div>';

  opfabApiResults.innerHTML = responses;
}

function simulateCardProcessing() {
  opfab.currentCard.displayLoadingSpinner()
  setTimeout(() => opfab.currentCard.hideLoadingSpinner(), 2000);
}

opfab.currentCard.listenToScreenSize( (size) =>
        document.getElementById("screenSize").innerHTML = size
);

opfab.currentCard.listenToTemplateRenderingComplete( () => 
        document.getElementById("opfab-currentCard-onTemplateRenderingComplete").innerHTML = "ok"
);

</script>
