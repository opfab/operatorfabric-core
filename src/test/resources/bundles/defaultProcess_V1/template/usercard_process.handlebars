<!-- Copyright (c) 2020-2023, RTE (http://www.rte-france.com)              -->
<!-- See AUTHORS.txt                                                       -->
<!-- This Source Code Form is subject to the terms of the Mozilla Public   -->
<!-- License, v. 2.0. If a copy of the MPL was not distributed with this   -->
<!-- file, You can obtain one at http://mozilla.org/MPL/2.0/.              -->
<!-- SPDX-License-Identifier: MPL-2.0                                      -->
<!-- This file is part of the OperatorFabric project.                      -->


<div style="width:100%;display:flex;flex-wrap:wrap">
    <div class="opfab-multiselect" style="flex-basis:0;width:100%;position:relative;flex-grow:1;margin-right:20px">
        <label> STATE OF THE PROCESS</label>
        <div id="state-select" placeholder="--Please choose an option--"></div>
    </div>

    <div class="opfab-multiselect" style="flex-basis:0;width:100%;position:relative;flex-grow:1;margin-left:20px">
        <label> STATUS OF THE STATE </label>
        <div id="status-select" placeholder="--Please choose an option--"></div>
    </div>
</div>


<script>

    userCardTemplate = {

        stateSelect: null,
        statusSelect: null,

        init: function () {
            this.initMultiSelect();
            this.selectValuesInEditMode();
            this.initGetSpecificInformation();
        },

        initMultiSelect: function () {
            this.stateSelect = opfab.multiSelect.init({
                id: "state-select",
                options: [
                    {label: 'Started', value: 'start'},
                    {label: 'Calculation 1 done', value: 'calcul1'},
                    {label: 'Calculation 2 done', value: 'calcul2'},
                    {label: 'Calculation 3 done', value: 'calcul3'}
                ],
                multiple: false,
                search: true
            });

            this.statusSelect = opfab.multiSelect.init({
                id: "status-select",
                options: [],
                multiple: false,
                search: false
            });
            // Init multiselect option list via setOptions() instead of init  
            // to have the method  setOptions() used in  cypress tests 
            this.statusSelect.setOptions([
                {label: 'Ok', value: 'ok'},
                {label: 'Error', value: 'error'},
            ],)
        },

        selectValuesInEditMode: function () {
            const selectedProcessState = "{{card.data.state}}";
            if (selectedProcessState.length > 0) this.stateSelect.setSelectedValues([selectedProcessState]);
            
            const selectedProcessStatus = "{{card.data.status}}";
            if (selectedProcessStatus.length > 0) this.statusSelect.setSelectedValues([selectedProcessStatus]);
        },

        initGetSpecificInformation: function () {
            opfab.currentUserCard.registerFunctionToGetSpecificCardInformation(() => {
                const state = document.getElementById('state-select').value;
                const status = document.getElementById('status-select').value;
                // keep deprecated method for cypress test only
                const selectedRecipients = usercardTemplateGateway.getSelectedEntityRecipients();
                if ((selectedRecipients.includes('ENTITY1_FR') || selectedRecipients.includes('ENTITY3_FR')) &&  !selectedRecipients.includes('ENTITY1_EU')) 
                  selectedRecipients.push('ENTITY1_EU');
                if ((selectedRecipients.includes('ENTITY2_FR') || selectedRecipients.includes('ENTITY4_FR')) &&  !selectedRecipients.includes('ENTITY2_EU')) 
                  selectedRecipients.push('ENTITY2_EU');
                if (selectedRecipients.includes('ENTITY_FR') && !selectedRecipients.includes('ENTITY1_EU'))
                      selectedRecipients.push('ENTITY1_EU');
                if (selectedRecipients.includes('ENTITY_FR') && !selectedRecipients.includes('ENTITY2_EU'))
                      selectedRecipients.push('ENTITY2_EU');

                const card = {
                    summary: {key: "message.summary"},
                    title: {key: "processState.title", parameters: {status: state}},
                    entityRecipients: selectedRecipients,
                    wktGeometry: "POINT (5.8946407 51.9848624)",
                    wktProjection: "EPSG:4326",
                    data: {
                        state: state,
                        status: status
                    }
                };
                if (status === "error") card.data.error = "true";
                return {
                    valid: true,
                    card: card
                };
            });
        }
    }

    userCardTemplate.init();

</script>