import com.github.jk1.license.render.*
plugins {
    id "com.github.jk1.dependency-license-report" version "1.6"
    id "com.moowork.node" version "1.2.0"
    id "org.asciidoctor.convert" version "1.5.9.2"
    id "maven-publish"
    id "signing"
    id "org.owasp.dependencycheck" version "5.2.0"
}

ext.versions = new Properties()
file("versions.properties").withReader { reader ->
    versions.load(reader)
}

ext {
    operatorfabric = [
            group: "org.lfenergy.operatorfabric",
            version: version = rootProject.file('VERSION').text.trim()
    ]

    boot = [
            springBootPlugin: "org.springframework.boot:spring-boot-gradle-plugin:${versions['spring.boot']}",
            starter         : "org.springframework.boot:spring-boot-starter:${versions['spring.boot']}",
            starterWeb      : "org.springframework.boot:spring-boot-starter-web:${versions['spring.boot']}",
            starterWebflux  : "org.springframework.boot:spring-boot-starter-webflux:${versions['spring.boot']}",
            actuator        : "org.springframework.boot:spring-boot-starter-actuator:${versions['spring.boot']}",
            starterAop      : "org.springframework.boot:spring-boot-starter-aop:${versions['spring.boot']}",
            starterJetty    : "org.springframework.boot:spring-boot-starter-jetty:${versions['spring.boot']}",
            starterRabbitmq : "org.springframework.boot:spring-boot-starter-amqp:${versions['spring.boot']}",
            starterSecurity : "org.springframework.boot:spring-boot-starter-security:${versions['spring.boot']}",
            starterOAuth2    : "org.springframework.security.oauth.boot:spring-security-oauth2-autoconfigure:${versions['spring.security.deprecated.oauth']}",
            starterMongoR   : "org.springframework.boot:spring-boot-starter-data-mongodb-reactive:${versions['spring.boot']}",
            starterTest     : "org.springframework.boot:spring-boot-starter-test:${versions['spring.boot']}",
            starterValidation: "org.springframework.boot:spring-boot-starter-validation:${versions['spring.boot']}",
            annotationConfiguration: "org.springframework.boot:spring-boot-configuration-processor:${versions['spring.boot']}",
            devTools        : "org.springframework.boot:spring-boot-devtools:${versions['spring.boot']}"
    ]

    spring = [
            securityJwt    : "org.springframework.security:spring-security-jwt:${versions['spring.security.jwt']}",
            securityOauthResource: "org.springframework.security:spring-security-oauth2-resource-server:${versions['spring.security']}",
            securityOauthJose: "org.springframework.security:spring-security-oauth2-jose:${versions['spring.security']}",
            securityTest: "org.springframework.security:spring-security-test:${versions['spring.security']}",
            webflux: "org.springframework:spring-webflux:${versions['spring']}",
            retry: "org.springframework.retry:spring-retry:1.2.2.RELEASE"
    ]

    cloud = [
            dependencies    : "org.springframework.cloud:spring-cloud-dependencies:${versions['spring.cloud']}",
            configMonitor   : "org.springframework.cloud:spring-cloud-config-monitor",
            starterConfigServer   : "org.springframework.cloud:spring-cloud-config-server",
            starterConfigClient   : "org.springframework.cloud:spring-cloud-starter-config",
            starterBus            : "org.springframework.cloud:spring-cloud-starter-bus-amqp",
            starterStream   : "org.springframework.cloud:spring-cloud-starter-stream-rabbit",
            starterFeign   : "org.springframework.cloud:spring-cloud-starter-openfeign",
            eurekaServer    : 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-server',
            eurekaClient    : 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client',
            gateway         : 'org.springframework.cloud:spring-cloud-starter-gateway'
    ]

    testing = [
            junit5Api: "org.junit.jupiter:junit-jupiter-api:${versions['junit5']}",
            junit5Engine: "org.junit.jupiter:junit-jupiter-engine:${versions['junit5']}",
            junit5Plugin: "org.junit.platform:junit-platform-gradle-plugin:${versions['junit5.platform']}",
            assertJ     : "org.assertj:assertj-core:${versions['assertj']}",
            reactor     : "io.projectreactor:reactor-test",
            awaitility  : "org.awaitility:awaitility-kotlin:${versions['awaitility']}"
    ]


    misc = [
            slf4j          : "org.slf4j:slf4j-api:${versions['log.sl4j']}",
            lombok         : "org.projectlombok:lombok:${versions['lombok']}",
            palantir       : "gradle.plugin.com.palantir.gradle.docker:gradle-docker:${versions['gradle.docker']}",
            compress       : "org.apache.commons:commons-compress:${versions['apache.commons.compress']}",
            feignMock      : "io.github.openfeign:feign-mock:${versions['feign']}",
            feignJackson   : "io.github.openfeign:feign-jackson:${versions['feign']}"
    ]

    generator = [
            swagger: "io.swagger:swagger-codegen-cli:${versions['swagger']}",
            swaggerGeneratorPlugin: "gradle.plugin.org.hidetake:gradle-swagger-generator-plugin:${versions['swagger.generator.plugin']}",
            springfoxSwagger2: "io.springfox:springfox-swagger2:${versions['springfox']}",
            springfoxSwaggerUI: "io.springfox:springfox-swagger-ui:${versions['springfox']}"
    ]

    plugin = [
            boot: "org.springframework.boot",
            bom: "io.spring.dependency-management",
            swagger: "org.hidetake.swagger.generator",
            dockerBuild: "com.palantir.docker",
            dockerRun: "com.palantir.docker-run",

    ]
    apk = [
            proxy : [uri:"",httpsuri:"",user:"",password:""]
    ]
}
ext.apk.proxy.uri = hasProperty('apk.proxy.uri') && property('apk.proxy.uri') != null && property('apk.proxy.uri') != ""? property('apk.proxy.uri') : System.env.APK_PROXY_URI != null ? "$System.env.APK_PROXY_URI" : ""
ext.apk.proxy.httpsuri = hasProperty('apk.proxy.httpsuri') && property('apk.proxy.uri') != null && property('apk.proxy.uri') != "" ? property('apk.proxy.uri') : System.env.APK_PROXY_HTTPS_URI != null ? "$System.env.APK_PROXY_HTTPS_URI" : apk.proxy.uri
ext.apk.proxy.user = hasProperty('apk.proxy.user') && property('apk.proxy.user') != null && property('apk.proxy.user') != "" ? property('apk.proxy.user') : System.env.APK_PROXY_USER != null ? "$System.env.APK_PROXY_USER" : ""
ext.apk.proxy.password = hasProperty('apk.proxy.password') && property('apk.proxy.password') != null && property('apk.proxy.password') != "" ? property('apk.proxy.password') : System.env.APK_PROXY_PASSWORD != null ? "$System.env.APK_PROXY_PASSWORD" : ""

licenseReport {
    renderers = [new InventoryHtmlReportRenderer()]
}

asciidoctor {
    sources {
        include 'architecture/index.adoc','start/index.adoc','user_guide/index.adoc','developer_guide/index.adoc', 'release_notes/index.adoc'
    }
    resources {
        from('src/docs/asciidoc') {
            include 'architecture/images/**/*', 'start/images/*', 'user_guide/images/*','developer_guide/images/*', 'release_notes/images/*'
        }
    }
    attributes nofooter : ''
    
}

//asciidoctor.doLast {
//    copy {
//        from "src/docs/asciidoc/architecture/images"
//        into "build/asciidoc/html5/architecture/images"
//        include '**/*'
//    }
//}

subprojects {

    group operatorfabric.group
    version operatorfabric.version
    apply plugin: "com.github.jk1.dependency-license-report"
    apply plugin: 'org.owasp.dependencycheck'

    if (project.name != 'main-user-interface') {
        task securityReport {
            dependsOn 'dependencyCheckAnalyze'
        }
    }
    

    licenseReport {
        renderers = [new InventoryHtmlReportRenderer()]
    }

    repositories {
        jcenter()
        mavenLocal()
        mavenCentral()
        maven { url "https://repo1.maven.org/maven2" }
        maven { url "https://repo.spring.io/release" }
        maven { url "https://repo.spring.io/snapshot" }
        maven { url "https://repo.spring.io/milestone" }
        maven { url "https://repo.spring.io/libs-snapshot" }
        maven { url "https://repo.spring.io/libs-milestone" }
        maven { url "https://maven.eveoh.nl/content/repositories/releases" }
        maven { url "https://artifacts.elastic.co/maven/"}
        maven { url "https://plugins.gradle.org/m2/" }
    }
    subprojects {
        apply plugin: 'java'
        apply plugin: 'org.asciidoctor.convert'

        sourceCompatibility = 1.8
        targetCompatibility = 1.8

        test {
            testLogging {
                events "passed", "skipped", "failed"
                exceptionFormat "full"
            }
        }

        javadoc {
            options.noTimestamp()
        }

        asciidoctor {
            sources {
                include 'index.adoc'
            }
            resources {
                from('src/docs/asciidoc') {
                    include 'images/**/*'
                }
            }
            attributes nofooter : ''
        }
        asciidoctor.doLast {
            copy {
                from "$buildDir/asciidoc/html5"
                into "$buildDir/docs/reference"
                include '*'
            }
        }
    }
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

 wrapper {
    gradleVersion = '6.1.1'
}
