plugins {
    id "com.github.node-gradle.node" version "7.0.2"
    id "org.asciidoctor.jvm.convert" version "4.0.3"
    id "maven-publish"
    id "signing"
    id "org.springframework.boot" version "$springBoot" apply false
    id "io.spring.dependency-management" version "1.1.6" apply false
    id 'org.sonarqube' version '5.1.0.4882'
    id "com.github.davidmc24.gradle.plugin.avro" version "1.9.1" apply false
    id "org.hidetake.swagger.generator" version "2.19.2" apply false
    id 'org.graalvm.buildtools.native' version '0.10.2' apply false

}

ext {
    operatorfabric = [
            group: 'org.opfab',
            description : 'OperatorFabric is a modular, extensible, industrial-strength platform for use in electricity, water, and other utility operations.',
            version: version = rootProject.file('VERSION').text.trim(),
            revisionDate: revisionDate = new Date().format('dd MMMM yyyy'),
            url: 'www.opfab.org'
    ]

    boot = [
            starterWeb              : "org.springframework.boot:spring-boot-starter-web:$springBoot",
            starterWebflux          : "org.springframework.boot:spring-boot-starter-webflux:$springBoot",
            actuator                : "org.springframework.boot:spring-boot-starter-actuator:$springBoot",
            starterUndertow         : "org.springframework.boot:spring-boot-starter-undertow:$springBoot",
            starterSecurity         : "org.springframework.boot:spring-boot-starter-security:$springBoot",
            starterMongo            : "org.springframework.boot:spring-boot-starter-data-mongodb:$springBoot",
            starterMongoR           : "org.springframework.boot:spring-boot-starter-data-mongodb-reactive:$springBoot",
            starterTest             : "org.springframework.boot:spring-boot-starter-test:$springBoot",
            starterValidation       : "org.springframework.boot:spring-boot-starter-validation:$springBoot",
            annotationConfiguration : "org.springframework.boot:spring-boot-configuration-processor:$springBoot"
    ]


    spring = [
            securityOauthResource   : "org.springframework.security:spring-security-oauth2-resource-server:$springSecurity",
            securityOauthJose       : "org.springframework.security:spring-security-oauth2-jose:$springSecurity",
            securityTest            : "org.springframework.security:spring-security-test:$springSecurity",
            webflux                 : "org.springframework:spring-webflux:$springWebflux"
    ]

    cloud = [
            avro                  : "org.apache.avro:avro:$avro",
            kafkaAvroSchemaRegistryClient    : "io.confluent:kafka-schema-registry-client:$kavroSchemaRegistryClient",
            kafkaAvroSerializer              : "io.confluent:kafka-avro-serializer:$kavroAvroSerializer",
            springKafka           : "org.springframework.kafka:spring-kafka:$springKafka",
            kafka          : "org.apache.kafka:kafka:$kafka",
            kafkaClients          : "org.apache.kafka:kafka-clients:$kafka"
    ]

    testing_deps = [
            junit5Api       : "org.junit.jupiter:junit-jupiter-api:$junit5",
            junit5Engine    : "org.junit.jupiter:junit-jupiter-engine:$junit5",
            assertJ         : "org.assertj:assertj-core:$assertj",
            reactor         : "io.projectreactor:reactor-test:$reactor",
            karate          : "com.intuit.karate:karate-junit5:$karate"
    ]


    misc = [
            slf4j          : "org.slf4j:slf4j-api:$slf4j",
            lombok         : "org.projectlombok:lombok:$lombok",
            compress       : "org.apache.commons:commons-compress:$apacheCommonsCompress",
            guava          : "com.google.guava:guava:33.3.0-jre",
            jacksonAnnotations   : "com.fasterxml.jackson.core:jackson-annotations:$jacksonAnnotations",
            collections4   : "org.apache.commons:commons-collections4:$apacheCommonsCollections4",
            commonsIO      : "commons-io:commons-io:$commonsIO",
            micrometer     : "io.micrometer:micrometer-registry-prometheus:$micrometer",
            jsonSmart      : "net.minidev:json-smart:2.5.1",
            handlebars     : "com.github.jknack:handlebars:4.4.0",
            jacksonDatabind   : "com.fasterxml.jackson.core:jackson-databind:$jacksonDatabind",
            jlibmodbus     : "com.intelligt.modbus:jlibmodbus:$jlibmodbus",
            commonsText    : "org.apache.commons:commons-text:$apacheCommonsText",
            commonsLang    : "org.apache.commons:commons-lang3:$apacheCommonsLang",
            commonsPool    : "org.apache.commons:commons-pool2:$apacheCommonsPool",
            rabbitMQ       : "com.rabbitmq:amqp-client:$rabbitMQ",

//Transitive dependencies udpate needed for security reasons 
            snakeyaml       : "org.yaml:snakeyaml:2.2",
//End transitive dependencies
    ]


    generator = [
            swagger                 : "io.swagger:swagger-codegen-cli:$swagger",
            swaggerUI               : "org.webjars:swagger-ui:$swaggerUI",
    ]

    proxy = [
            https : ""
    ]
}

// override spring boot rabbitMQ version 
// we do not use rabbitMQ via spring boot 
ext['rabbit-amqp-client.version']="$rabbitMQ"
ext.proxy.https =  System.env.https_proxy != null ? "$System.env.https_proxy" : ""

sonar {
    properties {
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.organization" , "opfab"
        property "sonar.projectKey" , "org.lfenergy.operatorfabric:operatorfabric-core"
        property 'sonar.sources', 'ui/main,node-services/cards-external-diffusion,node-services/cards-reminder,node-services/supervisor,node-services/common,cli'
        property 'sonar.junit.reportPaths','build/test-results/test'
        property 'sonar.coverage.jacoco.xmlReportPaths','build/reports/jacoco/xml/report.xml'
        property 'sonar.javascript.lcov.reportPaths','ui/main/reports/coverage/lcov.info,node-services/**/coverage/lcov.info'
        // **/src/tooling/** : one-time migration tools, not meant to evolve or be tested for regressions
        property 'sonar.coverage.exclusions','cli/**,config*/**/*,ui/**/*.spec.ts,ui/main/src/app/modules/**,\
                                              ui/main/src/app/server/**,ui/main/src/app/authentication/**,\
                                              ui/main/src/app/services/**,ui/main/src/app/router/**,ui/main/src/tests/**,\
                                              **/controllers/**,**/src/tooling/**,**/src/test/**,node-services/**/tests/*,\
                                              node-services/**/server-side/**,**/*config.js,**/*.conf.js,\
                                              client/**,**/spring-test-utilities/**,tools/spring/spring-mongo-utilities,\
                                              tools/generic/utilities/src/main/java/org/opfab/utilities/eventbus/rabbit/**,\
                                              tools/generic/test-utilities/**,tools/swagger-spring-generators/**,\
                                              tools/kafka-test/**'
        property 'sonar.exclusions','**/generated/**/*,**/src/docs/**/*,**/*Application.java,**/node_modules/**/*'
        // exclusions for analyse of duplicated code , test classes are excluded 
        property 'sonar.cpd.exclusions','**/model/**/*,**/src/test/**/*,**/*.spec.ts,src/test/**,node-services/**/tests/*'
        

        property 'sonar.issue.ignore.multicriteria', 'e1,e2'
        // ignore rule S2004 "Refactor this code to not nest functions more than 4 levels deep" for test files
        // we need to create nested test and this rule is blocking us
        property 'sonar.issue.ignore.multicriteria.e1.ruleKey', 'typescript:S2004'
        property 'sonar.issue.ignore.multicriteria.e1.resourceKey', '**/*.spec.ts'
        // Ignoring the rule: "Mouse events should have corresponding keyboard events"
        // Reason: There are alternative ways to ensure accessibility without providing a keyboard event for each mouse event.
        // For instance, a modal window with a close button that only responds to mouse events is not necessarily a problem,
        // provided that the modal can also be closed by pressing the Escape key.
        property 'sonar.issue.ignore.multicriteria.e2.ruleKey', 'Web:MouseEventWithoutKeyboardEquivalentCheck'
        property 'sonar.issue.ignore.multicriteria.e2.resourceKey', '**/*'
    }
}

//tag::asciidoctor_gradle_task_config[]
asciidoctor {

    baseDirFollowsSourceFile()

    sources {
        include '*/index.adoc','docs/*'
    }
    resources {
        from('src/docs/asciidoc') {
            include 'images/*','pdf/*'
        }
    }
    attributes  nofooter            : '',
            revnumber           : operatorfabric.version,
            revdate             : operatorfabric.revisionDate,
            sectnums            : '',
            sectnumlevels       : '4',
            sectanchors         : '',
            toc                 : 'left',
            toclevels           : '4',
            icons               : 'font',
            imagesdir           : '../images',
            "hide-uri-scheme"   : '',
            "source-highlighter": 'coderay'
}
//end::asciidoctor_gradle_task_config[]

subprojects {

    group operatorfabric.group
    version operatorfabric.version



    if (!project.path.contains('ui') && !project.path.contains('node-services') && !project.path.contains('rabbitmq')){

        subprojects {
            apply plugin: 'java'
            apply plugin: 'io.spring.dependency-management'

            test {
                testLogging {
                    events "passed", "skipped", "failed"
                    exceptionFormat "full"
                }
            }

            javadoc {
                options.noTimestamp()
            }

        }
    }
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}
