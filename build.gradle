import com.github.jk1.license.render.*
plugins {
    id "com.github.jk1.dependency-license-report" version "1.16"
    id "com.github.node-gradle.node" version "3.1.0"
    id "org.asciidoctor.convert" version "2.4.0"
    id "maven-publish"
    id "signing"
    id "org.owasp.dependencycheck" version "6.2.0"
    id 'org.springframework.boot' version '2.4.0-M1'
    id 'org.sonarqube' version '3.2.0' apply false
}

ext.versions = new Properties()
file("versions.properties").withReader { reader ->
    versions.load(reader)
}

ext {
    operatorfabric = [
            group: 'org.opfab',
            name: 'operatorbabric',
            description : 'OperatorFabric is a modular, extensible, industrial-strength platform for use in electricity, water, and other utility operations.',
            version: version = rootProject.file('VERSION').text.trim(),
            revisionDate: revisionDate = new Date().format('dd MMMM yyyy'),
            url: 'https://opfab.org'
    ]

    boot = [
            springBootPlugin        : "org.springframework.boot:spring-boot-gradle-plugin:${versions['spring.boot']}",
            starterWeb              : "org.springframework.boot:spring-boot-starter-web:${versions['spring.boot']}",
            starterWebflux          : "org.springframework.boot:spring-boot-starter-webflux:${versions['spring.boot']}",
            actuator                : "org.springframework.boot:spring-boot-starter-actuator:${versions['spring.boot']}",
            starterAop              : "org.springframework.boot:spring-boot-starter-aop:${versions['spring.boot']}",
            starterJetty            : "org.springframework.boot:spring-boot-starter-jetty:${versions['spring.boot']}",
            starterRabbitmq         : "org.springframework.boot:spring-boot-starter-amqp:${versions['spring.boot']}",
            starterSecurity         : "org.springframework.boot:spring-boot-starter-security:${versions['spring.boot']}",
            starterMongo            : "org.springframework.boot:spring-boot-starter-data-mongodb:${versions['spring.boot']}",
            starterMongoR           : "org.springframework.boot:spring-boot-starter-data-mongodb-reactive:${versions['spring.boot']}",
            starterTest             : "org.springframework.boot:spring-boot-starter-test:${versions['spring.boot']}",
            starterValidation       : "org.springframework.boot:spring-boot-starter-validation:${versions['spring.boot']}",
            annotationConfiguration : "org.springframework.boot:spring-boot-configuration-processor:${versions['spring.boot']}",
            devTools                : "org.springframework.boot:spring-boot-devtools:${versions['spring.boot']}"
    ]

    spring = [
            securityOauthResource   : "org.springframework.security:spring-security-oauth2-resource-server:${versions['spring.security']}",
            securityOauthJose       : "org.springframework.security:spring-security-oauth2-jose:${versions['spring.security']}",
            securityTest            : "org.springframework.security:spring-security-test:${versions['spring.security']}",
            webflux                 : "org.springframework:spring-webflux:${versions['spring']}",
            retry                   : "org.springframework.retry:spring-retry:${versions['spring.retry']}"
    ]

    cloud = [
            dependencies          : "org.springframework.cloud:spring-cloud-dependencies:${versions['spring.cloud']}",
            starterBus            : "org.springframework.cloud:spring-cloud-starter-bus-amqp",
            starterStream         : "org.springframework.cloud:spring-cloud-starter-stream-rabbit",
            starterFeign          : "org.springframework.cloud:spring-cloud-starter-openfeign",
            ribbon                : "org.springframework.cloud:spring-cloud-starter-netflix-ribbon"
    ]

    testing = [
            junit5Api       : "org.junit.jupiter:junit-jupiter-api:${versions['junit5']}",
            junit5Engine    : "org.junit.jupiter:junit-jupiter-engine:${versions['junit5']}",
            junit5Plugin    : "org.junit.platform:junit-platform-gradle-plugin:${versions['junit5.platform']}",
            assertJ         : "org.assertj:assertj-core:${versions['assertj']}",
            reactor         : "io.projectreactor:reactor-test",
            awaitility      : "org.awaitility:awaitility-kotlin:${versions['awaitility']}",
            karate          : "com.intuit.karate:karate-junit5:${versions['karate']}"
    ]


    misc = [
            slf4j          : "org.slf4j:slf4j-api:${versions['log.sl4j']}",
            lombok         : "org.projectlombok:lombok:${versions['lombok']}",
            palantir       : "com.palantir.gradle.docker:gradle-docker:${versions['gradle.docker']}",
            compress       : "org.apache.commons:commons-compress:${versions['apache.commons.compress']}",
            feignMock      : "io.github.openfeign:feign-mock:${versions['feign']}",
            feignJackson   : "io.github.openfeign:feign-jackson:${versions['feign']}",
            jacksonAnnotations   : "com.fasterxml.jackson.core:jackson-annotations:${versions['jacksonAnnotations']}",
            collections4   : "org.apache.commons:commons-collections4:${versions['apache.commons.collections4']}",
            micrometer     : "io.micrometer:micrometer-registry-prometheus:${versions['micrometer']}"
    ]

    generator = [
            swagger                 : "io.swagger:swagger-codegen-cli:${versions['swagger']}",
            swaggerGeneratorPlugin  : "gradle.plugin.org.hidetake:gradle-swagger-generator-plugin:${versions['swagger.generator.plugin']}",
            swaggerUI               : "org.webjars:swagger-ui:${versions['swaggerUI']}",
    ]

    plugin = [
            base        : "base",
            boot        : "org.springframework.boot",
            bom         : "io.spring.dependency-management",
            swagger     : "org.hidetake.swagger.generator",
            dockerBuild : "com.palantir.docker",
            dockerRun   : "com.palantir.docker-run",

    ]
    apk = [
            proxy : [uri:"",httpsuri:"",user:"",password:""]
    ]
}
ext.apk.proxy.uri = hasProperty('apk.proxy.uri') && property('apk.proxy.uri') != null && property('apk.proxy.uri') != ""? property('apk.proxy.uri') : System.env.APK_PROXY_URI != null ? "$System.env.APK_PROXY_URI" : ""
ext.apk.proxy.httpsuri = hasProperty('apk.proxy.httpsuri') && property('apk.proxy.uri') != null && property('apk.proxy.uri') != "" ? property('apk.proxy.uri') : System.env.APK_PROXY_HTTPS_URI != null ? "$System.env.APK_PROXY_HTTPS_URI" : apk.proxy.uri
ext.apk.proxy.user = hasProperty('apk.proxy.user') && property('apk.proxy.user') != null && property('apk.proxy.user') != "" ? property('apk.proxy.user') : System.env.APK_PROXY_USER != null ? "$System.env.APK_PROXY_USER" : ""
ext.apk.proxy.password = hasProperty('apk.proxy.password') && property('apk.proxy.password') != null && property('apk.proxy.password') != "" ? property('apk.proxy.password') : System.env.APK_PROXY_PASSWORD != null ? "$System.env.APK_PROXY_PASSWORD" : ""

licenseReport {
    renderers = [new InventoryHtmlReportRenderer()]
}

//tag::asciidoctor_gradle_task_config[]
asciidoctor {

    sources {
        include '*/index.adoc','docs/*'
    }
    resources {
        from('src/docs/asciidoc') {
            include 'images/*','pdf/*'
        }
    }
    attributes  nofooter            : '',
                revnumber           : operatorfabric.version,
                revdate             : operatorfabric.revisionDate,
                sectnums            : '',
                sectnumlevels       : '4',
                sectanchors         : '',
                toc                 : 'left',
                toclevels           : '4',
                icons               : 'font',
                imagesdir           : '../images',
                "hide-uri-scheme"   : '',
                "source-highlighter": 'coderay'
}
//end::asciidoctor_gradle_task_config[]

subprojects {

    group operatorfabric.group
    version operatorfabric.version
    apply plugin: "com.github.jk1.dependency-license-report"
    apply plugin: 'org.owasp.dependencycheck'
    

    if (project.name != 'main-user-interface') {
        task securityReport {
            dependsOn 'dependencyCheckAnalyze'
        }
    }   
    
    if (project.parent.path.startsWith(':services:')){
        apply plugin: 'org.sonarqube'
    }

    licenseReport {
        renderers = [new InventoryHtmlReportRenderer()]
    }

    repositories {
        jcenter()
        mavenLocal()
        mavenCentral()
        maven { url "https://repo1.maven.org/maven2" }
        maven { url "https://repo.spring.io/release" }
        maven { url "https://repo.spring.io/snapshot" }
        maven { url "https://repo.spring.io/milestone" }
        maven { url "https://repo.spring.io/libs-snapshot" }
        maven { url "https://repo.spring.io/libs-milestone" }
        maven { url "https://maven.eveoh.nl/content/repositories/releases" }
        maven { url "https://artifacts.elastic.co/maven/"}
        maven { url "https://plugins.gradle.org/m2/" }
    }
    subprojects {
        apply plugin: 'java'
        apply plugin: 'org.asciidoctor.convert'
        apply plugin: 'io.spring.dependency-management'
        apply plugin: plugin.bom

        sourceCompatibility = 1.8
        targetCompatibility = 1.8

        test {
            testLogging {
                events "passed", "skipped", "failed"
                exceptionFormat "full"
            }
        }

        javadoc {
            options.noTimestamp()
        }

    }
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

 wrapper {
    gradleVersion = '6.8.3'
}
