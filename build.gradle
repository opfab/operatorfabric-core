plugins {
    id "com.github.node-gradle.node" version "3.5.0"
    id "org.asciidoctor.jvm.convert" version "3.3.2"
    id "maven-publish"
    id "signing"
    id "org.springframework.boot" version "$springBoot" apply false
    id "io.spring.dependency-management" version "1.1.0" apply false
    id 'org.sonarqube' version '3.5.0.2730'
    id "com.github.davidmc24.gradle.plugin.avro" version "1.5.0" apply false
    id "com.palantir.docker" version "0.34.0" apply false
    id "org.hidetake.swagger.generator" version "2.19.2" apply false
}

ext {
    operatorfabric = [
            group: 'org.opfab',
            description : 'OperatorFabric is a modular, extensible, industrial-strength platform for use in electricity, water, and other utility operations.',
            version: version = rootProject.file('VERSION').text.trim(),
            revisionDate: revisionDate = new Date().format('dd MMMM yyyy'),
            url: 'www.opfab.org'
    ]

    boot = [
            starterWeb              : "org.springframework.boot:spring-boot-starter-web:$springBoot",
            starterWebflux          : "org.springframework.boot:spring-boot-starter-webflux:$springBoot",
            actuator                : "org.springframework.boot:spring-boot-starter-actuator:$springBoot",
            starterJetty            : "org.springframework.boot:spring-boot-starter-jetty:$springBoot",
            starterRabbitmq         : "org.springframework.boot:spring-boot-starter-amqp:$springBoot",
            starterSecurity         : "org.springframework.boot:spring-boot-starter-security:$springBoot",
            starterMongo            : "org.springframework.boot:spring-boot-starter-data-mongodb:$springBoot",
            starterMongoR           : "org.springframework.boot:spring-boot-starter-data-mongodb-reactive:$springBoot",
            starterTest             : "org.springframework.boot:spring-boot-starter-test:$springBoot",
            starterValidation       : "org.springframework.boot:spring-boot-starter-validation:$springBoot",
            annotationConfiguration : "org.springframework.boot:spring-boot-configuration-processor:$springBoot",
            devTools                : "org.springframework.boot:spring-boot-devtools:$springBoot"
    ]

    spring = [
            securityOauthResource   : "org.springframework.security:spring-security-oauth2-resource-server:$springSecurity",
            securityOauthJose       : "org.springframework.security:spring-security-oauth2-jose:$springSecurity",
            securityTest            : "org.springframework.security:spring-security-test:$springSecurity",
            webflux                 : "org.springframework:spring-webflux:$springWebflux",
            retry                   : "org.springframework.retry:spring-retry:$springRetry"
    ]

    cloud = [
            dependencies          : "org.springframework.cloud:spring-cloud-dependencies:$springCloud",
            starterFeign          : "org.springframework.cloud:spring-cloud-starter-openfeign:$springOpenFeign",
            avro                  : "org.apache.avro:avro:$avro",
            kafkaAvroSchemaRegistryClient    : "io.confluent:kafka-schema-registry-client:$kavroSchemaRegistryClient",
            kafkaAvroSerializer              : "io.confluent:kafka-avro-serializer:$kavroAvroSerializer",
            springKafka           : "org.springframework.kafka:spring-kafka:$springKafka",
            springKafkaTest       : "org.springframework.kafka:spring-kafka-test:$springKafka"
    ]

    testing_deps = [
            junit5Api       : "org.junit.jupiter:junit-jupiter-api:$junit5",
            junit5Engine    : "org.junit.jupiter:junit-jupiter-engine:$junit5",
            assertJ         : "org.assertj:assertj-core:$assertj",
            reactor         : "io.projectreactor:reactor-test:$reactor",
            awaitility      : "org.awaitility:awaitility-kotlin:$awaitility",
            karate          : "com.intuit.karate:karate-junit5:$karate"
    ]


    misc = [
            slf4j          : "org.slf4j:slf4j-api:$slf4j",
            lombok         : "org.projectlombok:lombok:$lombok",
            compress       : "org.apache.commons:commons-compress:$apacheCommonsCompress",
            feignMock      : "io.github.openfeign:feign-mock:$feign",
            feignJackson   : "io.github.openfeign:feign-jackson:$feign",
            feignCore      : "io.github.openfeign:feign-core:$feign",
            feignOkhttp      : "io.github.openfeign:feign-okhttp:$feign",
            guava          : "com.google.guava:guava:31.1-jre",
            jacksonAnnotations   : "com.fasterxml.jackson.core:jackson-annotations:$jacksonAnnotations",
            collections4   : "org.apache.commons:commons-collections4:$apacheCommonsCollections4",
            commonsIO      : "commons-io:commons-io:$commonsIO",
            micrometer     : "io.micrometer:micrometer-registry-prometheus:$micrometer",
            jsonSmart      : "net.minidev:json-smart:2.4.8",
            handlebars     : "com.github.jknack:handlebars:4.3.1",
            jacksonDatabind   : "com.fasterxml.jackson.core:jackson-databind:$jacksonDatabind",
            jlibmodbus     : "com.intelligt.modbus:jlibmodbus:1.2.9.7",
            commonsText    : "org.apache.commons:commons-text:$apacheCommonsText"
    ]

    generator = [
            swagger                 : "io.swagger:swagger-codegen-cli:$swagger",
            swaggerUI               : "org.webjars:swagger-ui:$swaggerUI",
    ]

    apk = [
            proxy : [uri:"",httpsuri:"",user:"",password:""]
    ]
}
ext.apk.proxy.uri = hasProperty('apk.proxy.uri') && property('apk.proxy.uri') != null && property('apk.proxy.uri') != ""? property('apk.proxy.uri') : System.env.APK_PROXY_URI != null ? "$System.env.APK_PROXY_URI" : ""
ext.apk.proxy.httpsuri = hasProperty('apk.proxy.httpsuri') && property('apk.proxy.uri') != null && property('apk.proxy.uri') != "" ? property('apk.proxy.uri') : System.env.APK_PROXY_HTTPS_URI != null ? "$System.env.APK_PROXY_HTTPS_URI" : apk.proxy.uri
ext.apk.proxy.user = hasProperty('apk.proxy.user') && property('apk.proxy.user') != null && property('apk.proxy.user') != "" ? property('apk.proxy.user') : System.env.APK_PROXY_USER != null ? "$System.env.APK_PROXY_USER" : ""
ext.apk.proxy.password = hasProperty('apk.proxy.password') && property('apk.proxy.password') != null && property('apk.proxy.password') != "" ? property('apk.proxy.password') : System.env.APK_PROXY_PASSWORD != null ? "$System.env.APK_PROXY_PASSWORD" : ""

sonar {
    properties {
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.organization" , "opfab"
        property "sonar.projectKey" , "org.lfenergy.operatorfabric:operatorfabric-core"
        property 'sonar.sources', 'ui/main'
        property 'sonar.junit.reportPaths','build/test-results/test'
        property 'sonar.coverage.jacoco.xmlReportPaths','build/reports/jacoco/xml/report.xml'
        // **/src/tooling/** : one-time migration tools, not meant to evolve or be tested for regressions
        property 'sonar.coverage.exclusions','**/config*/**/*,**/ui/**/*,**/controllers/**,**/src/tooling/**,**/src/test/**'
        property 'sonar.exclusions','**/generated/**/*,**/src/docs/**/*,**/*Application.java,**/node_modules/**/*'
        // exclusions for analyse of duplicated code , test classes are excluded 
        property 'sonar.cpd.exclusions','**/model/**/*,**/src/test/**/*,**/*.spec.ts,src/test/**'
    }
}

//tag::asciidoctor_gradle_task_config[]
asciidoctor {

    baseDirFollowsSourceFile()

    sources {
        include '*/index.adoc','docs/*'
    }
    resources {
        from('src/docs/asciidoc') {
            include 'images/*','pdf/*'
        }
    }
    attributes  nofooter            : '',
            revnumber           : operatorfabric.version,
            revdate             : operatorfabric.revisionDate,
            sectnums            : '',
            sectnumlevels       : '4',
            sectanchors         : '',
            toc                 : 'left',
            toclevels           : '4',
            icons               : 'font',
            imagesdir           : '../images',
            "hide-uri-scheme"   : '',
            "source-highlighter": 'coderay'
}
//end::asciidoctor_gradle_task_config[]

subprojects {

    group operatorfabric.group
    version operatorfabric.version



    if (!project.path.contains('ui')){

        subprojects {
            apply plugin: 'java'
            apply plugin: 'io.spring.dependency-management'

            test {
                testLogging {
                    events "passed", "skipped", "failed"
                    exceptionFormat "full"
                }
            }

            javadoc {
                options.noTimestamp()
            }

        }
    }
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}
