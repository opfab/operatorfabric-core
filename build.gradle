import com.github.jk1.license.render.*
plugins {
    id "com.github.jk1.dependency-license-report" version "1.16"
    id "com.github.node-gradle.node" version "3.1.0"
    id "org.asciidoctor.convert" version "1.5.10" //Upgrading to 2.4.0 changed the behaviour of {gradle-rootdir}, breaking all cross-document links
    id "maven-publish"
    id "signing"
    id "org.owasp.dependencycheck" version "6.2.0"
    id 'org.springframework.boot' version '2.4.6'
    id 'org.sonarqube' version '3.2.0' apply false
}

ext {
    operatorfabric = [
            group: 'org.opfab',
            name: 'operatorbabric',
            description : 'OperatorFabric is a modular, extensible, industrial-strength platform for use in electricity, water, and other utility operations.',
            version: version = rootProject.file('VERSION').text.trim(),
            revisionDate: revisionDate = new Date().format('dd MMMM yyyy'),
            url: 'https://www.opfab.org'
    ]

    boot = [
            springBootPlugin        : "org.springframework.boot:spring-boot-gradle-plugin:$springBoot",
            starterWeb              : "org.springframework.boot:spring-boot-starter-web:$springBoot",
            starterWebflux          : "org.springframework.boot:spring-boot-starter-webflux:$springBoot",
            actuator                : "org.springframework.boot:spring-boot-starter-actuator:$springBoot",
            starterAop              : "org.springframework.boot:spring-boot-starter-aop:$springBoot",
            starterJetty            : "org.springframework.boot:spring-boot-starter-jetty:$springBoot",
            starterRabbitmq         : "org.springframework.boot:spring-boot-starter-amqp:$springBoot",
            starterSecurity         : "org.springframework.boot:spring-boot-starter-security:$springBoot",
            starterMongo            : "org.springframework.boot:spring-boot-starter-data-mongodb:$springBoot",
            starterMongoR           : "org.springframework.boot:spring-boot-starter-data-mongodb-reactive:$springBoot",
            starterTest             : "org.springframework.boot:spring-boot-starter-test:$springBoot",
            starterValidation       : "org.springframework.boot:spring-boot-starter-validation:$springBoot",
            annotationConfiguration : "org.springframework.boot:spring-boot-configuration-processor:$springBoot",
            devTools                : "org.springframework.boot:spring-boot-devtools:$springBoot"
    ]

    spring = [
            securityOauthResource   : "org.springframework.security:spring-security-oauth2-resource-server:$springSecurity",
            securityOauthJose       : "org.springframework.security:spring-security-oauth2-jose:$springSecurity",
            securityTest            : "org.springframework.security:spring-security-test:$springSecurity",
            webflux                 : "org.springframework:spring-webflux:$springWebflux",
            retry                   : "org.springframework.retry:spring-retry:$springRetry"
    ]

    cloud = [
            dependencies          : "org.springframework.cloud:spring-cloud-dependencies:$springCloud",
            starterBus            : "org.springframework.cloud:spring-cloud-starter-bus-amqp",
            starterStream         : "org.springframework.cloud:spring-cloud-starter-stream-rabbit",
            starterFeign          : "org.springframework.cloud:spring-cloud-starter-openfeign",
            avro                  : "org.apache.avro:avro:$avro",
            gradleAvro            : "com.commercehub.gradle.plugin:gradle-avro-plugin:$gradleAvroPlugin",
            kafkaAvroSchemaRegistryClient    : "io.confluent:kafka-schema-registry-client:$kavroSchemaRegistryClient",
            kafkaAvroSerializer              : "io.confluent:kafka-avro-serializer:$kavroAvroSerializer",
            springKafka           : "org.springframework.kafka:spring-kafka"


    ]

    testing = [
            junit5          : "org.junit.jupiter:junit-jupiter:$junit5",
            junit5Api       : "org.junit.jupiter:junit-jupiter-api:$junit5",
            junit5Engine    : "org.junit.jupiter:junit-jupiter-engine:$junit5",
            junit5Plugin    : "org.junit.platform:junit-platform-gradle-plugin:$junit5Platform",
            assertJ         : "org.assertj:assertj-core:$assertj",
            reactor         : "io.projectreactor:reactor-test",
            awaitility      : "org.awaitility:awaitility-kotlin:$awaitility",
            karate          : "com.intuit.karate:karate-junit5:$karate"
    ]


    misc = [
            slf4j          : "org.slf4j:slf4j-api:$slf4j",
            lombok         : "org.projectlombok:lombok:$lombok",
            palantir       : "com.palantir.gradle.docker:gradle-docker:$gradleDocker",
            compress       : "org.apache.commons:commons-compress:$apacheCommonsCompress",
            feignMock      : "io.github.openfeign:feign-mock:$feign",
            feignJackson   : "io.github.openfeign:feign-jackson:$feign",
            guava          : "com.google.guava:guava:30.1.1-jre",
            jacksonAnnotations   : "com.fasterxml.jackson.core:jackson-annotations:$jacksonAnnotations",
            collections4   : "org.apache.commons:commons-collections4:$apacheCommonsCollections4",
            micrometer     : "io.micrometer:micrometer-registry-prometheus:$micrometer",
            jsonSmart      : "net.minidev:json-smart:2.4.7"
    ]

    generator = [
            swagger                 : "io.swagger:swagger-codegen-cli:$swagger",
            swaggerGeneratorPlugin  : "gradle.plugin.org.hidetake:gradle-swagger-generator-plugin:$swaggerGeneratorPlugin",
            swaggerUI               : "org.webjars:swagger-ui:$swaggerUI",
    ]

    plugin = [
            base        : "base",
            boot        : "org.springframework.boot",
            bom         : "io.spring.dependency-management",
            swagger     : "org.hidetake.swagger.generator",
            dockerBuild : "com.palantir.docker",
            dockerRun   : "com.palantir.docker-run",

    ]
    apk = [
            proxy : [uri:"",httpsuri:"",user:"",password:""]
    ]
}
ext.apk.proxy.uri = hasProperty('apk.proxy.uri') && property('apk.proxy.uri') != null && property('apk.proxy.uri') != ""? property('apk.proxy.uri') : System.env.APK_PROXY_URI != null ? "$System.env.APK_PROXY_URI" : ""
ext.apk.proxy.httpsuri = hasProperty('apk.proxy.httpsuri') && property('apk.proxy.uri') != null && property('apk.proxy.uri') != "" ? property('apk.proxy.uri') : System.env.APK_PROXY_HTTPS_URI != null ? "$System.env.APK_PROXY_HTTPS_URI" : apk.proxy.uri
ext.apk.proxy.user = hasProperty('apk.proxy.user') && property('apk.proxy.user') != null && property('apk.proxy.user') != "" ? property('apk.proxy.user') : System.env.APK_PROXY_USER != null ? "$System.env.APK_PROXY_USER" : ""
ext.apk.proxy.password = hasProperty('apk.proxy.password') && property('apk.proxy.password') != null && property('apk.proxy.password') != "" ? property('apk.proxy.password') : System.env.APK_PROXY_PASSWORD != null ? "$System.env.APK_PROXY_PASSWORD" : ""

licenseReport {
    renderers = [new InventoryHtmlReportRenderer()]
}

//tag::asciidoctor_gradle_task_config[]
asciidoctor {

    sources {
        include '*/index.adoc','docs/*'
    }
    resources {
        from('src/docs/asciidoc') {
            include 'images/*','pdf/*'
        }
    }
    attributes  nofooter            : '',
                revnumber           : operatorfabric.version,
                revdate             : operatorfabric.revisionDate,
                sectnums            : '',
                sectnumlevels       : '4',
                sectanchors         : '',
                toc                 : 'left',
                toclevels           : '4',
                icons               : 'font',
                imagesdir           : '../images',
                "hide-uri-scheme"   : '',
                "source-highlighter": 'coderay'
}
//end::asciidoctor_gradle_task_config[]

subprojects {

    group operatorfabric.group
    version operatorfabric.version
    apply plugin: "com.github.jk1.dependency-license-report"
    apply plugin: 'org.owasp.dependencycheck'
    

    if (project.name != 'main-user-interface') {
        task securityReport {
            dependsOn 'dependencyCheckAnalyze'
        }
    }   
    
    if (project.parent.path.startsWith(':services:')){
        apply plugin: 'org.sonarqube'
    }

    licenseReport {
        renderers = [new InventoryHtmlReportRenderer()]
    }

    repositories {
        jcenter()
        mavenLocal()
        mavenCentral()
        maven { url "https://repo1.maven.org/maven2" }
        maven { url "https://repo.spring.io/release" }
        maven { url "https://repo.spring.io/snapshot" }
        maven { url "https://repo.spring.io/milestone" }
        maven { url "https://repo.spring.io/libs-snapshot" }
        maven { url "https://repo.spring.io/libs-milestone" }
        maven { url "https://maven.eveoh.nl/content/repositories/releases" }
        maven { url "https://artifacts.elastic.co/maven/"}
        maven { url "https://plugins.gradle.org/m2/" }
    }
    subprojects {
        apply plugin: 'java'
        apply plugin: 'org.asciidoctor.convert'
        apply plugin: plugin.bom

        sourceCompatibility = 1.8
        targetCompatibility = 1.8

        test {
            testLogging {
                events "passed", "skipped", "failed"
                exceptionFormat "full"
            }
        }

        javadoc {
            options.noTimestamp()
        }

    }
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

 wrapper {
    gradleVersion = '6.8.3'
}
