plugins {
    id "base"
    id 'com.github.node-gradle.node'
    id "com.palantir.docker"
}

npmInstall {
    inputs.files(fileTree('node_modules'))
    inputs.file('package.json')
    inputs.file('package-lock.json')

    outputs.dir('build')

}

task runBuild(type: NpmTask) {
    inputs.files(fileTree('src'))
    inputs.files(fileTree('node_modules'))
    inputs.file('package.json')
    inputs.file('package-lock.json')

    outputs.dir('build')

    dependsOn npmInstall
    args = ['run', 'build']
}

task test(type: NpmTask) {
    inputs.files(fileTree('src'))
    inputs.files(fileTree('node_modules'))
    inputs.file('package.json')
    inputs.file('package-lock.json')
    inputs.file('jest.config.js')

    dependsOn runBuild
    args = ['run', 'test']
}

task deleteRuntimeConfigFile(type: Delete) {
    delete 'config/serviceConfig.json'
}

docker {
    name "lfeoperatorfabric/of-${project.name}:${project.version}"
    if (!project.version.equals("SNAPSHOT"))
        tag "latest", "latest"
    labels (['project':"${project.group}"])
    copySpec.with {
				from('build') {
					include 'domain/**'
                    include 'cardsReminder.js'
					into 'dockerBuild'
				}
                from('config') {
					include 'default-docker.json'
					into 'dockerConfig'
				}
				from('.') {
					include 'startCardsReminder.sh'
					include 'package.json'
					into '.'
				}
			}
    files( "bin", "package.json", "config")
    buildArgs([
                'https_proxy'    : proxy.https
                ])
    dockerfile file("docker/Dockerfile")
}
build.dependsOn(test)
build.dependsOn(runBuild)

clean.dependsOn(deleteRuntimeConfigFile)

assemble.dependsOn(runBuild)
tasks.dockerPrepare.dependsOn test
