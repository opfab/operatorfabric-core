subprojects {

    apply plugin: "org.springframework.boot"
    apply plugin: "org.hidetake.swagger.generator"

    /////// COMPILATION

    sourceSets {
        main {
            java {
                srcDir 'src/main/java'
                srcDir 'build/swagger/src/main/java'
            }
            resources{
                srcDir 'src/main/resources'
                srcDir 'build/src/generated/resources'
            }
        }
    }

    /////// CONFIGURATION


    swaggerSources {
        endpoints {
            inputFile = file('src/main/modeling/swagger.yaml')
            code {
                language = 'org.opfab.generators.OpfabSpringGenerator'
                additionalProperties = [ignoreImportMappings:"false"]
                configFile = file('src/main/modeling/config.json')
                outputDir = file("./build/swagger")
                templateDir = file('../../src/main/resources/swagger-templates')
            }
            ui {
                outputDir = file("./build/docs/api")
            }
        }
    }

    // This is a temporary fix to avoid false build error, see (#1543)
    tasks.named("processResources") {
        duplicatesStrategy = 'include'
    }


    /////// CUSTOM TASKS

   task debugSwaggerOperations(type: JavaExec) {
       description 'generate swagger code from /src/main/modeling/config.json to build/swagger-analyse'
        standardOutput = new ByteArrayOutputStream()
       classpath = configurations.swaggerCodegen
       mainClass = 'io.swagger.codegen.SwaggerCodegen'
       debug true
       systemProperty 'debugOperations', 'true'
       args ("generate",
         "-i", "$project.projectDir/src/main/modeling/swagger.yaml",
         "-l", "org.opfab.generators.OpfabSpringGenerator",
         "-c", "$project.projectDir/src/main/modeling/config.json",
         "-o", "$project.projectDir/build/swagger-analyse")
         doFirst {
            logger.info "creating $project.projectDir/build/swagger-analyse/"
            new File("$project.projectDir/build/swagger-analyse/").mkdirs()
        }
        doLast {
            new File("$project.projectDir/build/swagger-analyse/report.json").text = standardOutput.toString()
        }
   }

    task swaggerHelp(type: JavaExec) {
        description 'display help regarding swagger configuration options for java'
        classpath = configurations.swaggerCodegen
        mainClass = 'io.swagger.codegen.SwaggerCodegen'
        systemProperty 'debugOperations', 'true'
        args ("config-help","-l", "java")
    }

    /////// LIFE CYCLE (Simplified -- run gradle [task] generateTaskGraph for complete task dependencies)
    /*

     generateSwaggerCode <= compileJava      <=| classes |<= assemble <=| build             <=| docker
                            processResources <=|         |<= test     <=|                     |
                                                               /\         copyConfiguration <=|
                                                               ||======== jacocoTestReport
    */
    tasks.compileJava.dependsOn generateSwaggerCode
    tasks.compileTestJava.dependsOn generateSwaggerCode
    tasks.generateSwaggerCodeEndpoints.dependsOn ':tools:swagger-spring-generators:assemble'
}

