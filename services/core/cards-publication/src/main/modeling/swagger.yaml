swagger: '2.0'
info:
  description: OperatorFabric Card Consumer Service
  version: 0.13.1.RELEASE
  title: Card Management API
  termsOfService: ''
  contact:
    email: opfab-maintainers_AT_rte-france.com
    url: 'https://opfab.github.io/'
  license:
    name: Mozilla Public License V2.0
    url: 'http://mozilla.org/MPL/2.0/'
host: localhost
basePath: /apis
tags:
  - name: cards
    description: Everything concerning cards
  - name: actions
    description: Everything concerning actions
  - name: read
    description: Everything concerning resource state
  - name: creation
    description: Everything concerning resource creation
  - name: deletion
    description: Everything concerning resource deletion
  - name: archives
    description: Everything concerning archived cards
schemes:
  - http
definitions:
  EpochDate:
    type: object
    description: Number of milliseconds since Epoch (long integer)
    example: 1551868290379
  LongInteger:
    type: object
    description: Number of items
    example: 10
  TimeSpanDisplayModeEnum:
    type: string
    description: |-
      Time span disply mode >
      * BUBBLE: Only displays Time span start
      * LINE: displays start and end with a junction line
    enum:
      - BUBBLE
      - LINE
  CardOperationTypeEnum:
    type: string
    description: |-
      Type of operation >
      * ADD - Operation lists cards object to be added
      * UPDATE - Operation lists cards object to be updated
      * DELETE - Operation lists card ids to be deleted
    enum:
      - ADD
      - UPDATE
      - DELETE
    example: ADD
  SeverityEnum:
    type: string
    description: >-
      Severity of the card subject >

      * ALARM - The process instance behind the card is in critical condition

      * ACTION - The process instance behind the card is expecting an action
      from the user

      * QUESTION - The process instance behind the card needs information from
      the user

      * NOTIFICATION - Purely informational card
    enum:
      - ALARM
      - ACTION
      - QUESTION
      - NOTIFICATION
    example: NOTIFICATION
  InputEnum:
    type: string
    description: |-
      Input type >
      * TEXT - A simple text input (size not limited)
      * LONGTEXT - A long text input (size not limited)
      * BOOLEAN - A boolean input
      * LIST - A list with one selectable value
      * MULTI_LIST - A list with multiple selectable values
      * SWITCH_LIST - Two lists with exchangeable values
      * STATIC - A static non editable parameter
    enum:
      - TEXT
      - LONGTEXT
      - BOOLEAN
      - LIST
      - MULTI_LIST
      - SWITCH_LIST
      - STATIC
    example: TEXT
  ActionEnum:
    type: string
    description: |-
      Action type >
      * INTERNAL - Internal OperatorFabric action
      * URL - Uri based action
      * JNLP - Uri based jnlp action
    enum:
      - INTERNAL
      - URL
      - JNLP
    example: URL
  TitlePositionEnum:
    type: string
    description: |-
      Possible title positions >
      * UP - At the top of the detail
      * DOWN - At the bottom of the detail
      * NONE - Not displayed
    enum:
      - UP
      - DOWN
      - NONE
    example: UP
  RecipientEnum:
    type: string
    description: >-
      Recipient type >

      * BROADCAST - Card is sent to everybody

      * DEADEND - Card is sent to no one (mostly for testing purposes)

      * GROUP - Card is sent to every user belonging to a group (identity)

      * USER - Card is sent to a single user (identity)

      * UNION - Card is sent to users according to the union of a recipient
      list  (recipients)

      * INTERSECT - Card is sent to users according to the intersection of a
      recipient list (recipients)

      * RANDOM - Card is sent to user as defined by underlying recipient
      (recipient) a random user is picked as the main recipient

      * WEIGHTED - Card is sent to users as defined by underlying recipient
      (recipient) a random user is picked as the main recipient. A favorite user
      (favorite) may be specified and is favored in the random choosing process.

      * FAVORITE - Card is sent to user as defined by underlying recipient
      (recipient), if favorite user (favorite) is in the computed users list it
      will be set as main recipient
    enum:
      - BROADCAST
      - DEADEND
      - GROUP
      - USER
      - UNION
      - INTERSECT
      - RANDOM
      - WEIGHTED
      - FAVORITE
    example: GROUP
  I18n:
    type: object
    description: describes an i18n label
    properties:
      key:
        type: string
        description: i18n client side key
      parameters:
        type: object
        description: Optional parameters
        additionalProperties:
          type: string
    example:
      key: title
      parameters:
        EN: My Title
        FR: Mon Titre
  ParameterListItem:
    description: An item of list input parameter
    type: object
    properties:
      value:
        type: string
        description: parameter technical value
      label:
        $ref: '#/definitions/I18n'
        description: Value i18n label
    required:
      - value
    example:
      value: 42
      label:
        key: theAnswer
        parameters:
          EN: >-
            the Answer to the Ultimate Question of Life, the Universe, and
            Everything
          FR: 'la Réponse à la Grande Question sur la vie, l''Univers et le Reste'
  Input:
    description: Describe an input parameter for an Action
    type: object
    properties:
      type:
        $ref: '#/definitions/InputEnum'
        description: 'Parameter type, may imply some mandatory attributes, see description'
      label:
        $ref: '#/definitions/I18n'
        description: internationalized label
      mandatory:
        type: boolean
        default: false
        description: Is the parameter required
      name:
        type: string
        description: Parameter name (unique in action scope)
      value:
        type: string
        description: Parameter default value
      maxLength:
        type: integer
        description: >-
          Only for TEXT and LONGTEXT parameters. Specifies the maximum allowed
          character count
      rows:
        type: integer
        description: LONGTEXT parameter. Specifies the maximum number of displayed rows
      values:
        type: array
        description: >-
          Only for LIST,MULTI_LIST and SWITCH_LIST parameters. Specifies the
          selectable items in a list
        items:
          $ref: '#/definitions/ParameterListItem'
      selectedValues:
        type: array
        description: >-
          Only for MULTI_LIST and SWITCH_LIST parameters. List selected value.
          Order matters.
        items:
          type: string
      unSelectedValues:
        type: array
        description: >-
          Only for SWITCH_LIST parameters. List unselected values. Order
          matters.
        items:
          type: string
    required:
      - type
      - label
      - name
    example:
      type: LIST
      label:
        key: myCard.myAction.myInput.label
        parameters:
          EN: Colours
          FR: Couleurs
      mandatory: true
      name: selectedColour
      value:
        value: '#000000'
        label:
          key: black
          parameters:
            EN: Paint It Black
            FR: Broyer du noir
      values:
        - value: '#000000'
          label:
            key: black
            parameters:
              EN: Paint It Black
              FR: Broyer du noir
        - value: '#51CE1E'
          label:
            key: green
            parameters:
              EN: Go Green
              FR: Se mettre au vert
  ActionStatus:
    type: object
    properties:
      unlock:
        type: boolean
        description: Unlock action button upon client return after action submission
        default: true
      disabled:
        type: boolean
        description: disable action button upon client return
        default: false
      label:
        description: 'updated button label, if null no change'
        $ref: '#/definitions/I18n'
      contentStyle:
        type: string
        description: css classes of action button content (a &lt;i&gt; tag)
      buttonStyle:
        type: string
        description: css classes of action button
      inputs:
        description: >-
          list of action input parameters, generate a popup form upon action
          call
        type: array
        items:
          $ref: '#/definitions/Input'
    example:
      unlock: true
      disabled: false
      label:
        key: myCard.myAction.label
        parameters:
          EN: Update colour
          FR: Choisir une nouvelle couleur
      contentStyle: buttonContent.css
      buttonStyle: button.css
      inputs:
        - type: LIST
          label:
            key: myCard.myAction.myInput1.label
            parameters:
              EN: Colours
              FR: Couleurs
          mandatory: true
          name: selectedColour
          value:
            value: '#000000'
            label:
              key: black
              parameters:
                EN: Paint It Black
                FR: Broyer du noir
          values:
            - value: '#000000'
              label:
                key: black
                parameters:
                  EN: Paint It Black
                  FR: Broyer du noir
            - value: '#51CE1E'
              label:
                key: green
                parameters:
                  EN: Go Green
                  FR: Se mettre au vert
        - type: LONGTEXT
          label:
            key: myCard.myAction.myInput2.label
            parameters:
              EN: Comment
              FR: Commentaire
          mandatory: false
          name: comment
          value: ''
          maxLength: 250
          rows: 10
  CardCreationReport:
    type: object
    properties:
      count:
        type: integer
        description: Number of created cards
      message:
        type: string
    required:
      - count
      - message
    example:
      count: 10
      message: Cards successfully created.
  CardOperation:
    type: object
    description: >-
      This object holds an operation to be performed as well as a collection of
      cards (published in the same second) so as to be able to perform the
      operation on a batch of cards rather than on a single card.
    properties:
      number:
        $ref: '#/definitions/LongInteger'
      publishDate:
        $ref: '#/definitions/EpochDate'
      type:
        $ref: '#/definitions/CardOperationTypeEnum'
      cardIds:
        type: array
        items:
          type: string
        description: >-
          IDs of cards to be deleted. Only used for CardOperations of DELETE
          type.
      cards:
        type: array
        items:
          $ref: '#/definitions/LightCard'
        description: >-
          Card objects to be added or updated. Only used for CardOperations of
          ADD or UPDATE type.
    example:
      number: 3
      publishDate: 1546300800000
      type: DELETE
      cardIds:
        - 12345
        - 12346
        - 12347
  Detail:
    description: detail defines html data rendering
    type: object
    properties:
      title:
        description: Card i18n title
        $ref: '#/definitions/I18n'
      titleStyle:
        description: css classes applied to title
        type: string
      titlePosition:
        description: Title position
        $ref: '#/definitions/TitlePositionEnum'
      templateName:
        description: >-
          template unique name as defined by Third Party Bundle in Third Party
          Service
        type: string
      styles:
        description: >-
          css files names to load as defined by Third Party Bundle in Third
          Party Service
        type: array
        items:
          type: string
    example:
      title:
        key: myCard.title
        parameters:
          EN: My card title
          FR: Mon titre de carte
        titlePosition: UP
        titleStyle: myTitleStyle.css
        templateName: template1
        styles:
          - bundleTest.css
          - otherStyle.css
  Recipient:
    description: Recipient object defines rules for recipient computation
    type: object
    properties:
      type:
        $ref: '#/definitions/RecipientEnum'
        description: >-
          Specifies the recipient type. Please note that BROADCAST and DEADEND
          do not expose any other properties
      recipients:
        type: array
        items:
          $ref: '#/definitions/Recipient'
        description: >-
          Used by INTERSECT, UNION with multiple Recipients. Used by FAVORITE,
          RANDOM, WEIGHTED for single Recipient
      identity:
        type: string
        description: 'Used by USER, GROUP, FAVORITE'
      preserveMain:
        description: >-
          If main users from the underlying recipients are to be propagated.
          Used by INTERSECT and UNION recipients.
        type: boolean
    example:
      type: UNION
      recipients:
        - type: INTERSECT
          recipients:
            - type: GROUP
              identity: myGroupA
            - type: GROUP
              identity: myGroupB
          preserveMain: true
        - type: USER
          identity: aGivenUser
      preserveMain: true
  TimeSpan:
    type: object
    description: An object to define a business time span
    properties:
      start:
        $ref: '#/definitions/EpochDate'
        description: Span start
      end:
        $ref: '#/definitions/EpochDate'
        description: Span start
      display:
        $ref: '#/definitions/TimeSpanDisplayModeEnum'
        description: >-
          defaults to BUBBLE if only start is set and to LINE if start and end
          are set
    required:
      - start
  Card:
    type: object
    description: >-
      A Card sums up information about the status of a given process instance of
      the publishing service
    properties:
      uid:
        type: string
        description: Unique card ID
        readOnly: true
      id:
        type: string
        description: Unique card ID (as defined in the associated process)
        readOnly: true
      publisher:
        type: string
        description: Publishing service unique ID
      publisherVersion:
        type: string
        description: Publishing service version
      process:
        type: string
        description: associated process name
      processId:
        type: string
        description: Unique process ID of the associated process instance
      state:
        type: string
        description: associated process state name
      publishDate:
        $ref: '#/definitions/EpochDate'
        description: The date the card was published (meaning created by the card service)
        readOnly: true
      deletionDate:
        $ref: '#/definitions/EpochDate'
        description: The date the card was deleted
        readOnly: true
      lttd:
        $ref: '#/definitions/EpochDate'
        description: >-
          Last time to decide, after this date no action can be triggered on the
          card
      startDate:
        $ref: '#/definitions/EpochDate'
        description: Card validity start time
      endDate:
        $ref: '#/definitions/EpochDate'
        description: Card validity end time
      severity:
        $ref: '#/definitions/SeverityEnum'
        description: Card severity
      media:
        type: string
        description: Media unique ID for audio notification
      tags:
        type: array
        items:
          type: string
        description: Tags associated with the card
      timeSpans:
        type: array
        description: List of business time span associated to card
        items:
          $ref: '#/definitions/TimeSpan'
      details:
        type: array
        description: List of card associated details
        items:
          $ref: '#/definitions/Detail'
      title:
        description: Card i18n title
        $ref: '#/definitions/I18n'
      summary:
        description: Card i18n summary
        $ref: '#/definitions/I18n'
      recipient:
        description: Recipient computation rule
        $ref: '#/definitions/Recipient'
      mainRecipient:
        description: Main user recipient id (if any)
        type: string
        readOnly: true
      userRecipients:
        description: Complete list of user recipients at computation time
        readOnly: true
        type: array
        items:
          type: string
      groupRecipients:
        description: Complete list of group recipients at computation time
        readOnly: true
        type: array
        items:
          type: string
      data:
        type: object
        description: Business data
    required:
      - processId
      - publisher
      - publisherVersion
      - severity
      - startDate
      - title
      - summary
    example:
      uid: 12345
      id: cardIdFromMyProcess
      publisher: MyService
      publisherVersion: 0.0.1
      process: MyProcess
      processId: MyProcess_001
      state: started
      publishDate: 1546300800000
      deletionDate: 1546388200000
      lttd: 1546387230000
      startDate: 1546387200000
      endDate: 1546387250000
      severity: ACTION
      media: sound1.wav
      tags:
        - MyService
        - MyProcess
        - ACTION
      actions:
        - type: URL
          lockAction: true
          lockCard: true
          needsConfirm: false
          called: false
          updateState: false
          updateStateBeforeAction: false
          hidden: true
          contentStyle: buttonContent.css
          buttonStyle: button.css
          label:
            key: myCard.myAction.label
            parameters:
              EN: My actions label
              FR: Mon intitule d'actions
          inputs:
            - type: LIST
              label:
                key: myCard.myAction.myInput1.label
                parameters:
                  EN: Available options
                  FR: Options disponibles
              mandatory: true
              name: selectedOption
              value: plan B
              values:
                - plan A
                - plan B
                - plan C
            - type: LONGTEXT
              label:
                key: myCard.myAction.myInput2.label
                parameters:
                  EN: Comment
                  FR: Commentaire
              mandatory: false
              name: comment
              value: ''
              maxLength: 250
              rows: 10
      details:
        title:
          key: myCard.title
          parameters:
            EN: My card title
            FR: Mon titre de carte
        titlePosition: UP
        titleStyle: myTitleStyle.css
        templateName: template1
        styles:
          - bundleTest.css
          - otherStyle.css
      title:
        key: myservice.myprocess.title
        parameters:
          EN: My process name
          FR: Mon nom de processus
      summary:
        key: myservice.myprocess.title.summary
        parameters:
          EN: Summary of card content
          FR: Resume du contenu de la carte
      recipient:
        type: UNION
        recipients:
          - type: INTERSECT
            recipients:
              - type: GROUP
                identity: myGroupA
              - type: GROUP
                identity: myGroupB
            preserveMain: true
          - type: USER
            identity: aGivenUser
        preserveMain: true
  Subscription:
    type: object
    description: LightCard Subscription object
    properties:
      rangeStart:
        $ref: '#/definitions/EpochDate'
        description: subscription range start time
      rangeEnd:
        $ref: '#/definitions/EpochDate'
        description: subscription range end time
      loadedCards:
        type: array
        items:
          type: string
  LightCard:
    type: object
    description: >-
      LightCard bears the essential information of a Card, to be aggregated in
      CardOperations.
    readOnly: true
    properties:
      uid:
        type: string
        description: Unique card ID
      id:
        type: string
        description: Unique card ID for associated process
      publisher:
        type: string
        description: Publishing service unique ID
      publisherVersion:
        type: string
        description: Publishing service version
      process:
        type: string
        description: associated process name
      processId:
        type: string
        description: Unique process ID of the associated process instance
      state:
        type: string
        description: associated process state name
      lttd:
        $ref: '#/definitions/EpochDate'
        description: >-
          Last time to decide, after this date no action can be triggered on the
          card
      startDate:
        $ref: '#/definitions/EpochDate'
        description: Card validity start time
      endDate:
        $ref: '#/definitions/EpochDate'
        description: Card validity end time
      publishDate:
        $ref: '#/definitions/EpochDate'
        description: Publication time of the Card
      severity:
        $ref: '#/definitions/SeverityEnum'
        description: Card severity
      media:
        type: string
        description: Media unique ID for audio notification
      tags:
        type: array
        items:
          type: string
        description: Tags associated with the card
      title:
        description: Card i18n title
        $ref: '#/definitions/I18n'
      summary:
        description: Card i18n summary
        $ref: '#/definitions/I18n'
      mainRecipient:
        description: Main user recipient ID (if any)
        type: string
        readOnly: true
      timeSpans:
        type: array
        description: List of business time span associated to card
        items:
          $ref: '#/definitions/TimeSpan'
    example:
      uid: 12345
      id: cardIdFromMyProcess
      publisher: MyService
      publisherVersion: 0.0.1
      processId: MyProcess_001
      lttd: 1546387230000
      startDate: 1546387200000
      endDate: 1546387250000
      severity: ACTION
      media: sound1.wav
      tags:
        - MyService
        - MyProcess
      title:
        key: myservice.myprocess.title
        parameters:
          EN: My process name
          FR: Mon nom de processus
      summary:
        key: myservice.myprocess.title.summary
        parameters:
          EN: Summary of card content
          FR: Resume du contenu de la carte
      mainRecipient: givenUser
  LightCardPage:
    type: object
    description: >-
      This object contains the result of a paginated query returning LightCards: a list of LightCards
      as well as additional information on the result: total number of items, page number, page size, etc.
    properties:
      content:
        type: array
        items:
          $ref: '#/definitions/LightCard'
        description: >-
          LightCard objects making up the required result page
      first:
        type: boolean
        description: >-
          Is true for the first page (page number = 0)
      last:
        type: boolean
        description: >-
          Is true for the last page
      totalPages:
        type: number
        description: >-
          Total number of pages returned by the query
      totalElements:
        type: number
        description: >-
          Total number of elements returned by the query
      numberOfElements:
        type: number
        description: >-
          Number of elements in the current page
      size:
        type: number
        description: >-
          Page size (max number of items in page)
      number:
        type: number
        description: >-
          Page number
paths:
  /async/cards:
    post:
      tags:
        - cards
        - creation
      summary: publish cards
      description: Publish one or more cards to OperatorFabric
      operationId: publishCardsAsync
      consumes:
        - application/json
      parameters:
        - name: cards
          in: body
          schema:
            type: array
            items:
              $ref: '#/definitions/Card'
      responses:
        '202':
          description: accepted
  /cardSubscription:
    get:
      tags:
        - cards
        - read
        - subscription
      summary: fetch card operations
      description: >-
        fetch cards restricted to calling user. Fetched cards all come with
        empty data and details. requesting this end point opens an SSE
        connection
      operationId: getCardSubscription
      produces:
        - application/json
      parameters:
        - name: rangeStart
          type: string
          format: date-time
          in: query
          description: start of time range to get published card
        - name: rangeEnd
          type: string
          format: date-time
          in: query
          description: end of time range to get published card
        - name: notification
          type: boolean
          in: query
          default: false
          description: >-
            If true, connection is kept for notification of new cards (not
            related to the specified range)
        - name: clientId
          type: string
          in: query
          description: >-
            A unique id to identify client to allow for reconnection (an
            autogenerated UUID is the best solution)
      responses:
        '200':
          description: ok
          schema:
            type: array
            items:
              $ref: '#/definitions/CardOperation'
        '401':
          description: Authentication required
        '403':
          description: Forbidden - User doesn't have any group
  '/cardSubscription/{uiId}':
    put:
      tags:
        - cards
        - subscription
      summary: Update existing subscription
      description: Update existing subscription
      operationId: updateCardSubscription
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: path
          name: uiId
          description: unique ui client id associated to subscription
          type: string
          required: true
        - in: body
          name: subscription
          description: updated subscription
          schema:
            $ref: '#/definitions/Subscription'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Subscription'
        '400':
          description: Bad request (body doesn't match login path parameter)
        '401':
          description: Authentication required
        '404':
          description: Subscription not found
  /cards:
    post:
      tags:
        - cards
        - creation
      summary: publish cards
      description: publish one or more card to OperatorFabric
      operationId: publishCards
      consumes:
        - application/json
      parameters:
        - name: cards
          in: body
          schema:
            type: array
            items:
              $ref: '#/definitions/Card'
      responses:
        '200':
          description: created
          schema:
            $ref: '#/definitions/CardCreationReport'
        '400':
          description: erroneous payload
          schema:
            $ref: '#/definitions/CardCreationReport'
  /archives:
    get:
      tags:
        - archives
        - read
      summary: get archived cards matching given criteria
      description: >-
        get archived cards matching the criteria given as parameters. Results are limited to the cards that
        the calling user is allowed to see (based on the card recipients).
      operationId: fetchArchivedCardsWithParams
      consumes:
        - application/json
      parameters:
        - in: query
          name: page
          type: number
          required: false
          description: >-
            Page number of the page to retrieve.
            If "size" is set but "page" isn't, the default page returned will be the first (number 0).
            If "page" is set but "size" isn't, the default size will be 10 items.
            If neither "page" nor "size" is set, the response will contain a single page containing all matching cards.
            This parameter should be unique or a BAD REQUEST will be returned.
        - in: query
          name: size
          type: number
          required: false
          description: >-
            Size of the results pages.
            If "size" is set but "page" isn't, the default page returned will be the first (number 0).
            If "page" is set but "size" isn't, the default size will be 10 items.
            If neither "page" nor "size" is set, the response will contain a single page containing all matching cards.
            This parameter should be unique or a BAD REQUEST will be returned.
        - in: query
          name: publishDateFrom
          type: number
          required: false
          description: >-
            Date as number of milliseconds since epoch. If this query parameter is set, only cards
            with a publishDate that is after this date will be returned.
            This parameter should be unique or a BAD REQUEST will be returned.
        - in: query
          name: publishDateTo
          type: number
          required: false
          description: >-
            Date as number of milliseconds since epoch. If this query parameter is set, only cards
            with a publishDate that is before this date will be returned.
            This parameter should be unique or a BAD REQUEST will be returned.
        - in: query
          name: activeFrom
          type: number
          required: false
          description: >-
            Date as number of milliseconds since epoch. If this query parameter is set, only cards
            with an active period (as defined by their startDate and endDate properties) that
            overlaps the range [activeFrom, activeTo] will be returned. If no parameter activeTo is set,
            only cards with at least part of their active period after activeFrom will be returned.
            This parameter should be unique or a BAD REQUEST will be returned.
        - in: query
          name: activeTo
          type: number
          required: false
          description: >-
            Date as number of milliseconds since epoch. If this query parameter is set, only cards
            with an active period (as defined by their startDate and endDate properties) that
            overlaps the range [activeFrom, activeTo] will be returned. If no parameter activeFrom is set,
            only cards with at least part of their active period before activeTo will be returned.
            This parameter should be unique or a BAD REQUEST will be returned.
        - in: query
          name: publisher
          type: string
          required: false
          description: >-
            If this parameter is set, results will be limited to cards from this publisher.
            This parameter can be set multiple times to filter cards from several publishers,
            using the following syntax: ?publisher=publisher1&publisher=publisher2
        - in: query
          name: process
          type: string
          required: false
          description: >-
            If this parameter is set, results will be limited to cards from this process.
            This parameter can be set multiple times to filter cards from several processes,
            using the following syntax: ?process=process1&process=process2
        - in: query
          name: tags
          type: string
          required: false
          description: >-
            If this parameter is set, results will be limited to cards containing this tag.
            This parameter can be set multiple times to filter cards with several tags,
            using the following syntax: ?tags=tag1&tags=tag2. In this example, cards bearing
            either tag1 or tag2 (or both) will be returned.
        - in: query
          name: XXXX
          type: string
          required: false
          description: >-
            In addition to the query parameters described above, any query parameter of the form
            ?key=value, where "key" is the name of a card field, will filter cards to return
            only cards where the field "key" is either equal to the string "value" or to an array
            containing "value".
            If key isn't a card property, the filter will have no effect.
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/LightCardPage'
        '400':
          description: Bad request
        '401':
          description: Authentication required
        '403':
          description: Forbidden - User doesn't have any group
  '/{millisTime}/next':
    parameters:
      - in: path
        name: millisTime
        type: number
        required: true
        description: time in milliseconds from epoch
    get:
      operationId: fetchNextCard
      tags:
        - cards
        - read
      summary: fetch next card after specified time if any
      description: fetch current card for process id
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Card'
        '404':
          description: no card found
  '/{millisTime}/previous':
    parameters:
      - in: path
        name: millisTime
        type: number
        required: true
        description: time in milliseconds from epoch
    get:
      operationId: fetchPreviousCard
      tags:
        - cards
        - read
      summary: fetch previous card before specified time if any
      description: fetch current card for process id
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Card'
        '404':
          description: no card found
  '/archives/{id}':
    parameters:
      - in: path
        name: id
        type: string
        required: true
    get:
      operationId: fetchArchivedCard
      tags:
        - archives
        - read
      summary: fetch archived card
      description: fetch archived card with the given id
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Card'
        '401':
          description: Authentication required
        '403':
          description: Forbidden - User doesn't have any group
  '/cards/{processId}':
            parameters:
              - in: path
                name: processId
                type: string
                required: true
            delete:
              operationId: deleteProcessCard
              tags:
                - cards
                - deletion
              summary: delete current card
              description: delete current card for process id
              responses:
                '200':
                  description: OK
            get:
              operationId: fetchProcessCard
              tags:
                - cards
                - read
              summary: fetch current card
              description: fetch current card for process id
              responses:
                '200':
                  description: OK
                  schema:
                    $ref: '#/definitions/Card'
                '401':
                  description: Authentication required
                '403':
                  description: Forbidden - User doesn't have any group
  '/cards/{processId}/actions/{actionKey}':
    parameters:
      - in: path
        name: processId
        type: string
        required: true
      - in: path
        name: actionKey
        type: string
        required: true
    get:
      operationId: fetchProcessCardAction
      tags:
        - cards
        - actions
        - read
      summary: Fetch action status
      description: >-
        Fetch an updated action status for action to update client side
        representation
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/ActionStatus'
        '401':
          description: Authentication required
        '403':
          description: Forbidden - User doesn't have any group
    put:
      operationId: triggerProcessCardAction
      tags:
        - cards
        - actions
      summary: Trigger action
      description: >-
        Trigger corresponding action in OperatorFabric, returns ActionStatus
        upon action realization
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/ActionStatus'
