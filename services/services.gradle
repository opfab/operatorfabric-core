subprojects {

    apply plugin: 'java'
    apply plugin: 'jacoco'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'org.springframework.boot'

    dependencies {
        implementation boot.actuator
        implementation misc.micrometer
        annotationProcessor misc.lombok
        implementation misc.lombok

    //Transitive dependencies udpate needed for security reasons 
        implementation misc.snakeyaml
    //End transitive dependencies

        testAnnotationProcessor misc.lombok
        testCompileOnly misc.lombok

        testImplementation boot.starterTest, testing_deps.assertJ
        testImplementation project(':tools:generic:test-utilities')

    }

    configurations {
        implementation.exclude module: "spring-boot-starter-tomcat"
        testImplementation.exclude module: "spring-boot-starter-tomcat"
    }

    sourceSets {
        main {
            java {
                srcDir 'src/main/java'
            }
            resources{
                srcDir 'src/main/resources'
            }
        }
    }

    test {
        useJUnitPlatform()

        filter {
            includeTestsMatching "*Should"
        }
    }
    // This is a temporary fix to avoid false build error, see (#1543)
    tasks.named("processResources") {
        duplicatesStrategy = 'include'
    }

    jacocoTestReport {
        group = "Reporting"
        reports {
            xml.required = true
            csv.required = false
            html.outputLocation = file("${buildDir}/reports/jacoco/html")
            xml.outputLocation = file("${buildDir}/reports/jacoco/xml/report.xml")
        }
    }

    task buildDocker(type: Exec) {
        workingDir project.projectDir
        commandLine 'docker', 'build', 
                    '--build-arg', "https_proxy=${proxy.https}",
                    '--build-arg', "JAR_FILE=${project.name.toLowerCase()}-${project.version.toUpperCase()}.jar",
                    '-t', "lfeoperatorfabric/of-${project.name}:${project.version}", '.'
    }

    task copyScriptsForDockerImage(type: Copy) {
        description 'copy script for docker image'
        from "$project.projectDir/../../src/main/docker/add-certificates.sh"
        from "$project.projectDir/../../src/main/docker/java-config-docker-entrypoint.sh"
        into "$project.projectDir/build/docker"
        doFirst {
            logger.info "creating $project.projectDir/build/dockerFiles/"
            new File("$project.projectDir/build/docker/").mkdirs()
        }
    }
  
    tasks.buildDocker.dependsOn copyScriptsForDockerImage
    tasks.buildDocker.dependsOn build
    tasks.jacocoTestReport.dependsOn test

}


