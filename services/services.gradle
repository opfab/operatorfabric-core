buildscript {
    repositories {
        jcenter()
        mavenLocal()
        mavenCentral()
        maven { url "https://repo.spring.io/release" }
        maven { url "https://repo.spring.io/snapshot" }
        maven { url "https://repo.spring.io/libs-snapshot" }
        maven { url "https://repo.spring.io/milestone" }
        maven { url "https://repo.spring.io/libs-milestone" }
        maven { url "https://plugins.gradle.org/m2/" }
    }

    dependencies {
        //classpath testing.junit5Plugin
        classpath boot.springBootPlugin
        classpath generator.swaggerGeneratorPlugin
        classpath misc.palantir

    }
}
subprojects {
    /////// PLUGINS
    if (!project.name.equals("infra")&&!project.name.equals("core")&&!project.name.equals("web")) {
        apply plugin: 'java'
        apply plugin: 'jacoco'
        apply plugin: plugin.bom
        apply plugin: plugin.boot
        apply plugin: plugin.dockerBuild

        /////// DEPENDENCIES

        dependencyManagement {
            imports {
                mavenBom cloud.dependencies
            }
        }

        dependencies {
            compile boot.actuator
            compile cloud.starterConfigClient
            annotationProcessor misc.lombok
            implementation misc.lombok

            testAnnotationProcessor misc.lombok
            testCompileOnly misc.lombok
            testRuntimeOnly "org.junit.jupiter:junit-jupiter:${versions['junit5']}"
            testImplementation "org.junit.jupiter:junit-jupiter:${versions['junit5']}"

            testImplementation boot.starterTest, testing.assertJ
            testImplementation project(':tools:generic:test-utilities')
            testImplementation testing.awaitility
            testImplementation group:'org.jeasy', name: 'easy-random-core', version: '4.0.0'

        }

        configurations {
            compile.exclude module: "spring-boot-starter-tomcat"
            testImplementation.exclude module: "spring-boot-starter-tomcat"
            testImplementation.exclude module: "junit"
        }

        /////// CONFIGURAdiscoveryTION

        // Boot

        bootRun {
            systemProperty 'spring.profiles.active', findProperty('spring.profiles.active') ?: 'dev, native'
            systemProperty 'spring.cloud.bootstrap.location', findProperty('spring.cloud.bootstrap.location') ?: './src/main/resources/bootstrap-dev.yml'
        }

        // Tests

        test {
            useJUnitPlatform()

            filter {
                includeTestsMatching "*Should"
            }
        }

        task unitTest(type: Test) {
            description 'runs unit tests'
            filter {
                includeTestsMatching "*Should"
            }
        }

        jacocoTestReport {
            group = "Reporting"
            reports {
                xml.enabled true
                csv.enabled false
                html.destination file("${buildDir}/reports/jacoco/html")
                xml.destination file("${buildDir}/reports/jacoco/xml/report.xml")

            }
        }

        // Docker
        //For X.X.X.SNAPSHOT versions, docker images should be pushed with "snapshot" tag as the version number isn't
        //important since the content evolves every day (see OC-579)
        //For X.X.X.RELEASE versions, docker images are pushed with the full version number
        ext.isSnapshot = version.endsWith(".SNAPSHOT")
        if (isSnapshot) {
            ext.dockerVersionTag = "snapshot"
        } else {
            ext.dockerVersionTag = "${project.version}"
        }

        docker {
            name "lfeoperatorfabric/of-${project.name.toLowerCase()}"
            tags 'latest', dockerVersionTag
            labels (['project':"${project.group}"])
            files jar.archivePath, 'src/main/resources/bootstrap-docker.yml', 'src/main/resources/application-docker.yml', '../../../src/main/docker/java-config-dependent-docker-entrypoint.sh', '../../../src/main/docker/java-config-docker-entrypoint.sh', '../../../src/main/docker/java-registry-docker-entrypoint.sh','../../../src/main/docker/add-certificates.sh'
            buildArgs(['JAR_FILE'       : "${jar.archiveName}",
                       'http_proxy'     : apk.proxy.uri,
                       'https_proxy'    : apk.proxy.uri,
                       'HTTP_PROXY_AUTH': "basic:*:$apk.proxy.user:$apk.proxy.password"])
            dockerfile file("src/main/docker/Dockerfile")
        }

        /////// CUSTOM TASKS

        /*Task that copies all the dependencies under build/libs */
        task copyDependencies(type: Copy) {
            description 'copy dependencies to build/libs'
            from configurations.compile
            into 'build/libs'
        }

        /* convenient copy for generating modifiable configuration from template*/
        task copyWorkingDir(type: Copy) {
            description 'copies [sub-project]/src/main/docker/volume to [sub-project]/build/'
            from "$project.projectDir/src/main/docker/volume/"
            into "$project.projectDir/build/docker-volume/"
            doFirst {
                logger.info "creating $project.projectDir/build/docker-volume/"
                new File("$project.projectDir/build/docker-volume/").mkdirs()
            }
        }

        tasks.docker.dependsOn copyWorkingDir
        tasks.docker.dependsOn build
        tasks.jacocoTestReport.dependsOn test

        Map[] commands = [
                [command: ["up"], dependsOn: "copyWorkingDir"],
                [command: ["down"]],
                [command: ["logs", "-f"]],
                [command: ["start"], dependsOn: "copyWorkingDir"],
                [command: ["stop"]]
        ]
        for (Map c : commands) {
            createComposeTasks(c, project)
        }
    }
}

void createComposeTasks(Map taskDef, Project prj){
    def cmdName = taskDef.command[0].capitalize()
    def baseargs = ["-f", "$prj.projectDir/src/main/docker/docker-compose.yml"]
    def bashargs = ((baseargs as List) << (taskDef.command as List)).flatten()
//    println "generating compose$cmdName task with $bashargs"
    def task = prj.task([type: Exec],"compose$cmdName", {
        executable "docker-compose"
        args bashargs
//      dependsOn prj.tasks.copyWorkingDir
    })

    if(taskDef.dependsOn){
        task.dependsOn prj.tasks[taskDef.dependsOn]
    }


}
