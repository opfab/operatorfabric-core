dependencies {
    swaggerCodegen generator.swagger, project(':tools:swagger-spring-generators')
    swaggerUI generator.swaggerUI
    implementation boot.starterSecurity
    implementation spring.securityOauthResource, spring.securityOauthJose
    implementation boot.starterValidation
    implementation misc.guava
    implementation misc.commonsIO
    compileOnly boot.annotationConfiguration
    annotationProcessor boot.annotationConfiguration

    implementation boot.starterWeb, boot.starterUndertow
    implementation project(':tools:generic:utilities')
    implementation project(':tools:spring:spring-oauth2-utilities')
    implementation project(':tools:spring:spring-utilities')
    implementation project(':client:businessconfig-client-data')
    implementation project(':client:users-client-data')
    testImplementation project(':tools:spring:spring-test-utilities')
    testImplementation spring.securityTest
}

bootJar {
    manifest {
        attributes("Created-By"             : "Gradle ${gradle.gradleVersion}",
                   "Specification-Title"    : "OperatorFabric Businessconfig Parties Manager",
                   "Implementation-Title"   : "OperatorFabric Businessconfig Parties Manager",
                   "Implementation-Version" : operatorfabric.version,
                   "Specification-Version"  : operatorfabric.version
        )
    }
}


/////// CUSTOM TASKS
// Test data tasks >>>>>
task compressBundle1Data(type: Exec){
    description 'generate tar.gz businessconfig party configuration data for tests in build/test-data'
    workingDir "$project.projectDir/src/test/data/bundles/second/2.0/"
    executable "bash"
    args "-c", "tar -czf $project.projectDir/build/test-data/bundles/second-2.0.tar.gz *"
}
task compressBundle2Data(type: Exec){
    description 'generate tar.gz businessconfig party configuration data for tests in build/test-data'
    workingDir "$project.projectDir/src/test/data/bundles/second/2.1/"
    executable "bash"
    args "-c", "tar -czf $project.projectDir/build/test-data/bundles/second-2.1.tar.gz *"
}
task copyProcessGroupsFile(type: Exec){
    description 'copy processgroups.json file for businessconfig party configuration data for tests in build/test-data'
    workingDir "$project.projectDir/src/test/data/"
    executable "bash"
    args "-c", "cp processgroups.json $project.projectDir/build/test-data/"
}

task copyProcessGroupsFile2(type: Exec) {
    description 'copy processgroups_with_duplicate_in_same_group.json file for businessconfig party configuration data for tests in build/test-data'
    workingDir "$project.projectDir/src/test/data/"
    executable "bash"
    args "-c", "cp processgroups_with_duplicate_in_same_group.json $project.projectDir/build/test-data/"
}

task copyProcessGroupsFile3(type: Exec) {
    description 'copy processgroups_with_duplicate_in_different_groups.json file for businessconfig party configuration data for tests in build/test-data'
    workingDir "$project.projectDir/src/test/data/"
    executable "bash"
    args "-c", "cp processgroups_with_duplicate_in_different_groups.json $project.projectDir/build/test-data/"
}

task copyRealTimeScreensFile(type: Exec){
    description 'copy realtimescreens.json file for businessconfig party configuration data for tests in build/test-data'
    workingDir "$project.projectDir/src/test/data/"
    executable "bash"
    args "-c", "cp realtimescreens.json $project.projectDir/build/test-data/"
}

task copyMonitoringFile(type: Exec){
    description 'copy monitoring.json file for businessconfig party configuration data for tests in build/test-data'
    workingDir "$project.projectDir/src/test/docker/volume/businessconfig-storage"
    executable "bash"
    args "-c", "cp monitoring.json $project.projectDir/build/test-data/businessconfig-storage/monitoring.json"
}

task createDevData(type: Copy){
    description 'prepare data in build/dev-data for running OpFab in dev mode'
    from 'src/main/docker/volume/businessconfig-storage'
    into 'build/dev-data/businessconfig-storage'
    doFirst{
        logger.info "copying src/main/docker/volume/* to build/dev-data/businessconfig-storage/"
    }
}

task prepareTestDataDir {
    description 'prepare directory (build/test-data) for test data'
    doFirst {
        logger.info "creating $project.projectDir/build/test-data/"
        new File("$project.projectDir/build/test-data/bundles/").mkdirs()
        new File("$project.projectDir/build/test-data/businessconfig-storage/").mkdirs()
    }
}

task prepareDevDataDir {
    description 'prepare directory (build/dev-data)'
    doFirst {
        logger.info "creating $project.projectDir/build/dev-data/"
        new File("$project.projectDir/build/dev-data/bundles/").mkdirs()
    }
}


createDevData.dependsOn prepareDevDataDir
compressBundle1Data.dependsOn prepareTestDataDir
compressBundle2Data.dependsOn prepareTestDataDir
copyProcessGroupsFile.dependsOn prepareTestDataDir
copyProcessGroupsFile2.dependsOn prepareTestDataDir
copyProcessGroupsFile3.dependsOn prepareTestDataDir
copyRealTimeScreensFile.dependsOn prepareTestDataDir
copyMonitoringFile.dependsOn prepareTestDataDir
test.dependsOn prepareTestDataDir,compressBundle1Data,compressBundle2Data,copyProcessGroupsFile,copyProcessGroupsFile2,copyProcessGroupsFile3,copyRealTimeScreensFile,copyMonitoringFile
bootRun.dependsOn createDevData

// <<<<< Test data tasks
