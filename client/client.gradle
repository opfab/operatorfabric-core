buildscript {
    repositories {
        jcenter()
        mavenLocal()
        mavenCentral()
        maven { url "https://repo.spring.io/release" }
        maven { url "https://repo.spring.io/snapshot" }
        maven { url "https://repo.spring.io/libs-snapshot" }
        maven { url "https://repo.spring.io/milestone" }
        maven { url "https://repo.spring.io/libs-milestone" }
        maven { url "https://plugins.gradle.org/m2/" }
    }

    dependencies {
        classpath generator.swaggerGeneratorPlugin
    }
}

subprojects {

    apply plugin: 'java'
    apply plugin: 'jacoco'
    apply plugin: plugin.swagger
    apply plugin: 'maven-publish'
    apply plugin: 'signing'

    /////// COMPILATION

    dependencies {
        swaggerCodegen generator.swagger, project(':tools:swagger-spring-generators')
        swaggerUI generator.swaggerUI
        annotationProcessor misc.lombok
        implementation misc.lombok
        testRuntimeOnly testing.junit5Engine
        testImplementation testing.junit5Api
        testCompile boot.starterTest, testing.assertJ, misc.lombok
        compile misc.jacksonAnnotations
    }

    sourceSets {
        main {
            java {
                srcDir 'src/main/java'
                srcDir 'build/swagger/src/main/java'
            }
            resources{
                srcDir 'src/main/resources'
                srcDir 'build/src/generated/resources'
            }
        }
    }

    swaggerSources {
        model {
            inputFile = file("../../services/core/$project.projectDir.name/src/main/modeling/swagger.yaml")
            
            code {
                additionalProperties = [ignoreImportMappings:"false"]
                language = 'org.opfab.generators.OpfabClientGenerator'
                configFile = file('src/main/modeling/config.json')
                outputDir = file("./build/swagger")
                templateDir = file('../src/main/resources/swagger-templates')
                components = ['models']
            }
            ui {
                outputDir = file("./build/docs/api")
            }
        }
    }


    configurations {
        testCompile.exclude module: "junit"
    }

    /////// CONFIGURATION
    test {
        useJUnitPlatform()
        filter {
            includeTestsMatching "*Should"
        }
    }

    jacocoTestReport {
        group = "Reporting"
        reports {
            xml.enabled true
            csv.enabled false
            html.destination file("${buildDir}/reports/coverage")
        }
    }

    /////// CUSTOM TASKS

    /*Task that copies all the dependencies under build/libs */
    task copyDependencies(type: Copy) {
        description 'copy dependencies to build/libs'
        from configurations.compile
        into 'build/libs'
    }

    tasks.jacocoTestReport.dependsOn test
    tasks.compileJava.dependsOn generateSwaggerCode
    tasks.compileTestJava.dependsOn generateSwaggerCode
    tasks.generateSwaggerCodeModel.dependsOn ':tools:swagger-spring-generators:assemble'


    /** Configuration of publication of client jars to Maven Central */

    task sourcesJar(type: Jar){
        archiveClassifier='sources'
        from sourceSets.main.allJava
    }

    task javadocJar(type: Jar){
        archiveClassifier = 'javadoc'
        from javadoc.destinationDir
    }

    publishing{
        publications{
            clientLibraryMaven(MavenPublication){
                from components.java
                artifact sourcesJar
                artifact javadocJar

                pom {
                    name="${operatorfabric.name}"
                    description="${operatorfabric.description}"
                    version="${project.version}"
                    url="${operatorfabric.url}"
                    licenses{
                        license{
                            name = 'Mozilla Public License Version 2.0'
                            url = 'https://www.mozilla.org/en-US/MPL/'
                        }
                    }
                    developers {
                        developer {
                            id = 'freddidierRTE'
                            name = 'Frédéric Didier'
                            email = 'frederic-f.didier@rte-france.com'
                        }
                        developer {
                            id = 'AlexGuironnetRTE'
                            name = 'Alexandra Guironnet'
                            email = 'alexandra.guironnet@rte-france.com'
                        }
                    }
                    scm {
                        url = 'https://github.com/opfab/operatorfabric-core'
                        connection = 'scm:git:git://github.com:opfab/operatorfabric-core.git'
                        developerConnection = 'scm:git:ssh://github.com:opfab/operatorfabric-core.git'
                    }
                }
            }
        }

        repositories{

            maven{

                name = 'ossrh' //The name serves as prefix for the username and password properties taken from the gradle.properties file as credentials

                def releasesRepoUrl = 'https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/'
                def snapshotsRepoUrl = layout.buildDirectory.dir('repos/snapshots')

                // The Sonatype staging repo doesn't accept snapshot versions so when executing the publishing task on
                // a snapshot version the produced artifacts will appear in the build directory (see path above).
                if (project.version.endsWith("SNAPSHOT")) {
                    url snapshotsRepoUrl
                } else {
                    url releasesRepoUrl
                    credentials(PasswordCredentials)
                }

            }
        }

    }

    signing {
        useGpgCmd() //These is needed to work with GPG2 See https://github.com/gradle/gradle/issues/888#issuecomment-708439524
        sign publishing.publications.clientLibraryMaven
    }
}
