sudo: required
dist: trusty
addons:
    sonarcloud:
        organization: "opfab"
        token:
            secure: "r3BfCTuMqW5B6GvQR5ZnnHauciJsqOLeKPMRp7NS1vr6oIo4SHIO6zyLbHUK7ItRt8at+DPkQE8eHtDSWlYutKwfbRPwxcqR4zf4AYuVmHWCS7WmcERMEixbOo5lGQ47KjMMsTbGTSg+Atv80Y3fugX4prm4rDWE8G/Irqvw4GW8P9DeI5upHOTBRzPifrT/PVoovCsqkdfzEFJBYb/fl9VdT340+nrxmcM1Lm1dQeDibAdqdXJQxjgKvbZTUq0D8Ih65EPEESQZjkb8G9CGumsfm6Rhcu1btrqVUCdv8QXe/ERkmryMSA041SmgmtEAf+b/TfdgIn1SLnEbOlLIv1melv0yvBhMHijcASZP1gsnfOTBKFRE616a87L7y3XrX58OAHiAaZ9ecpW5McOI6hHwlHpUaFvKTvbN05lxe3VziYmCIT0SRRrfquyoe8b9s/04FzGTSVnVumKCzlwUJq5M1pbjnS5XOgQCuwauAEarqdCyS9iSWPPm8NkSxkkNu43tCykYRh8dDAN/4E7f8oSoW2RrSsMpJ7a3Q77ACVQJQZtiGQdDStUPHtLNQlN8vzbYNHrkpZbO4nT64tONaTvwFirbkuQpkAGmYFN8jSSeyNRI+gM1lx3fxowjyIt+D+8KsofX5GYG7IDRTt9jVUkcwBOicDG9IuZ3ZaZRtVU="
services:
  - docker
env:
  - NODE_VERSION="v10.16.3"
language: java
before_install:
  - nvm install $NODE_VERSION
install:
  # first install needs to remove ~/.sdkman (empty in our case because created by cache step) otherwise SdkMan is not installed
  # then install sdkman
  # configures by default SdkMan to use new installed java directly and updates itself if needed.
  - if [ -z "$(ls -A $HOME/.sdkman)" ]; then
    rm -fr $HOME/.sdkman ;
    curl -s "https://get.sdkman.io" | bash ;
    echo sdkman_auto_answer=true > ~/.sdkman/etc/config ;
    echo sdkman_auto_selfupdate=true >> $HOME/.sdkman/etc/config ;
    fi
  # needed in order to have sdk available into the current environment
  - source "$HOME/.sdkman/bin/sdkman-init.sh" ;
  - EXPECTED_NPM_VERSION="6.4.1"
  - CurrentNpmVersion="$(npm -version)"
  - if [ "${CurrentNpmVersion}" != "${EXPECTED_NPM_VERSION}" ] ; then npm i -g npm@${EXPECTED_NPM_VERSION} ; fi
  # Should be synch with ${OF_HOME}/bin/load_environment_light.sh. It's the first part of the sdk reference without vendor name
  # for example the current configured in sdk has the following reference `8.0.242-zulu`
  # the value of the following variable is `8.0.242` and its vendor name part is `-zulu`
  - CURRENT_JDK_VERSION="8.0.242"
  # need to substitute last dot by an underscore. Example value for the following: "1.8.0_242"
  # for java version higher than 8 the prefix `1.` should be removed
  - FULL_JDK_VERSION="1.${CURRENT_JDK_VERSION%.*}${CURRENT_JDK_VERSION/*./_}"
  # example value for the following: "8.0.242-zulu"
  - JDK_VERSION_4_SDKMAN="${CURRENT_JDK_VERSION}-zulu"
  # Use javac because the prompt is simpler than the java one
  # skips the beginning should return 1.8.0_242. Here redirection '2>&1' needed to load prompt value otherwise variable is empty
  - CurrentJavacVersionNumber="$(javac -version 2>&1 | cut -d ' ' -f 2)"
  # if javac version is different than expected then asks sdkman to use expected java version or install it if necessary
  # if sdkman can't use the expected java version then asks sdkman to install it. Sdkman is configured to use it as default (line 26)
  - if [ "${CurrentJavacVersionNumber}" != "${FULL_JDK_VERSION}" ] ;
    then
    if ! sdk use java "${JDK_VERSION_4_SDKMAN}" ;
    then
    sdk install java "${JDK_VERSION_4_SDKMAN}" ;
    fi ;
    fi
  - sudo apt-get install realpath
  # `<VERSION` is builtin way to load VERSION file content. No usage of cat needed
  - export OF_VERSION=$(<VERSION)


jobs:
  include:
  - stage: test-assemble
    script:
      # displays versions of useful tools for visual checks
      - npm -version
      - sdk version
      - javac -version
      - docker-compose -f src/main/docker/test-environment/docker-compose.yml up -d
      - export GRADLE_OPTS="-XX:MaxMetaspaceSize=512m -Xmx1024m"
      # If SONAR_TOKEN is not available (for external PRs for example), skip sonar
      - ./gradlew --build-cache copyDependencies test jacocoTestReport
      - if [ "${SONAR_TOKEN}" != "" ]; then
        (sonar-scanner) && (echo sonar-scanner was run);
        fi
      - docker-compose -f src/main/docker/test-environment/docker-compose.yml down
  - stage: docker-images
    script:
    - echo preparing image for version $OF_VERSION
    - docker login --username ${DOCKER_CLOUD_USER} --password ${DOCKER_CLOUD_PWD}
    - export GRADLE_OPTS="-XX:MaxMetaspaceSize=512m -Xmx1024m"
    - "[[ $OF_VERSION =~ .+SNAPSHOT$ ]] && ./gradlew --build-cache copyWorkingDir dockerPushSnapshot -x test || echo not publishing docker snapshot tag"
    - "[[ $OF_VERSION =~ .+RELEASE$ ]] && ./gradlew --build-cache copyWorkingDir dockerPushLatest -x test || echo not publishing docker latest tag"
    - "[[ $OF_VERSION =~ .+RELEASE$ ]] && ./gradlew --build-cache copyWorkingDir dockerPush${OF_VERSION} -x test || echo not publishing docker ${OF_VERSION} tag"
    - docker image ls -a|grep lfeoperatorfabric
  - stage: doc
    script:
      - export GRADLE_OPTS="-XX:MaxMetaspaceSize=512m -Xmx1024m"
      - ./gradlew --build-cache generateSwaggerUI asciidoctor
      - ./CICD/travis/upload_doc.sh
stages:
  - test-assemble
  - name: docker-images
    if: (type = cron OR commit_message =~ ci_docker) AND (NOT type IN (pull_request)) AND (branch = master)
  - name: doc
    if: (type = cron OR commit_message =~ ci_documentation) AND (NOT type IN (pull_request)) AND (branch = master)
# Note: The condition on type is necessary to exclude PRs because their base branch could be master
#script:
#  - docker-compose -f src/main/docker/test-environment/docker-compose.yml up -d
#  - ./gradlew copyDependencies build jacocoTestReport && sonar-scanner
#deploy:
#- provider: script
#  skip_cleanup: true
#  script: ./CICD/travis/upload_doc.sh
#  on:
#    all_branches: true
#   # condition: $TRAVIS_EVENT_TYPE = cron  # Commented out while in documentation phase to trigger doc upload for all builds
before_cache:
  # cleanup gradle caches
  - rm -f  $HOME/.gradle/caches/modules-2/modules-2.lock
  - rm -fr $HOME/.gradle/caches/*/plugin-resolution/
#  - docker image prune -f -a --filter="label=project=org.lfenergy.operatorfabric"
#  - >
#    mkdir -p $HOME/docker && docker images -a --filter='dangling=false' --format '{{.Repository}}:{{.Tag}} {{.ID}}'
#    | xargs -n 2 -t sh -c 'test -e $HOME/docker/$1.tar.gz || docker save $0 | gzip -2 > $HOME/docker/$1.tar.gz'
cache:
  bundler: true
  directories:
    # caches gradle caches
    - $HOME/.gradle/caches/
    - $HOME/.gradle/wrapper/
    - $HOME/.gradle/dependency-check-data/
    # cache ui dependencies
    - ui/main/nodes_modules
    - $HOME/.sdkman
