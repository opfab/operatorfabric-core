os: linux
dist: xenial
addons:
    chrome: stable
services:
  - docker
language: java
# To avoid duplicate builds generated by tags during releases and feature branches (PR build is enough)
if: (tag IS blank AND (type = pull_request OR NOT (branch =~ ^FE-.+$))) OR commit_message =~ ci_build
before_install:
  - export OF_VERSION=$(<VERSION)
  - export GRADLE_OPTS="-XX:MaxMetaspaceSize=512m -Xmx1024m"
  - export SDKMAN_CONFIG_FILE=${HOME}/.sdkman/etc/config
  - ./CICD/travis/check_version.sh --branch $TRAVIS_BRANCH --version $OF_VERSION
install:
  # first install needs to remove ~/.sdkman (empty in our case because created by cache step) otherwise SdkMan is not installed
  # then install sdkman
  - if [ -z "$(ls -A ${HOME}/.sdkman)" ]; then
    rm -fr ${HOME}/.sdkman ;
    curl -s "https://get.sdkman.io" | bash ;
    echo sdkman_auto_answer=true > ${SDKMAN_CONFIG_FILE} ;
    echo sdkman_auto_selfupdate=true >> ${SDKMAN_CONFIG_FILE} ;
    fi
  # needed in order to have sdk available into the current environment
  - source "${HOME}/.sdkman/bin/sdkman-init.sh" ;
  # sets up the required tools for the development environment with the appropriate version
  - source ./bin/load_environment_light.sh
  - sudo apt-get install realpath
  - sudo apt-get install jq
  # install
  # displays versions of useful tools for visual checks
  - npm -version
  - node --version
  - sdk version
  - javac -version
jobs:
  include:
    - stage: build
      script:
        - echo ${DOCKER_CLOUD_PWD} | docker login --username ${DOCKER_CLOUD_USER} --password-stdin
        - docker-compose -f src/main/docker/test-environment/docker-compose.yml up -d
        - ./gradlew  copyDependencies test jacocoTestReport dockerTag${OF_VERSION} || travis_terminate 1;
        - docker-compose -f src/main/docker/test-environment/docker-compose.yml down
        # Launch karate tests
        - cd config/docker
        - ./docker-compose.sh
        - cd ../../bin
        - ./waitForOpfabToStart.sh
        - cd ../src/test/api/karate
        - ./launchAll.sh
        - cd ../../../../config/docker
        - docker-compose down --remove-orphans
        # Launch cypress tests
        - ./docker-compose-cypress.sh
        - cd ../../bin
        - ./waitForOpfabToStart.sh
        - cd $OF_HOME
        - ./gradlew runCypressTests
        - cd ./config/docker
        - docker-compose down
    - stage: doc
      script:
        - ./gradlew --build-cache generateSwaggerUI asciidoctor || travis_terminate 1;
        - ./CICD/travis/upload_doc.sh
    - stage: doc-latest
      script:
        - ./gradlew --build-cache generateSwaggerUI asciidoctor || travis_terminate 1;
        - ./CICD/travis/upload_doc.sh --updateLatest true
    - stage: docker-push-version
      script:
        - echo preparing images for version $OF_VERSION
        - echo ${DOCKER_CLOUD_PWD} | docker login --username ${DOCKER_CLOUD_USER} --password-stdin
        - ./gradlew --build-cache copyWorkingDir dockerPush${OF_VERSION} -x test
        - docker image ls -a|grep lfeoperatorfabric
    - stage: docker-push-latest
      script:
        - echo preparing images for version $OF_VERSION
        - echo ${DOCKER_CLOUD_PWD} | docker login --username ${DOCKER_CLOUD_USER} --password-stdin
        - ./gradlew --build-cache copyWorkingDir dockerPushLatest -x test
        - docker image ls -a|grep lfeoperatorfabric
    - stage: docker-tag-version
      script:
        - echo preparing images for version $OF_VERSION
        - ./gradlew --build-cache copyWorkingDir dockerTag${OF_VERSION} -x test
        - docker image ls -a|grep lfeoperatorfabric
stages:
  - name: build
    if: type = cron OR commit_message =~ ci_docker OR (branch =~ .+release$) OR branch =master
  - name: doc
    if: ((((type = cron OR commit_message =~ ci_documentation) AND (branch = develop)) OR (commit_message =~ ci_documentation AND NOT commit_message =~ ci_latest AND branch =~ .+hotfixes$)) AND NOT type = pull_request)
  - name: doc-latest
    if: (branch = master OR (branch =~ .+hotfixes$ AND commit_message =~ ci_latest)) AND NOT type = pull_request
  - name: docker-push-version
    if: (((type = cron OR commit_message =~ ci_docker) AND (branch = develop OR branch =~ .+hotfixes$)) OR branch = master) AND NOT type = pull_request
  - name: docker-push-latest
    if: branch = master OR (branch =~ .+hotfixes$ AND commit_message =~ ci_latest) AND NOT type = pull_request
  - name: docker-tag-version
    if: (branch =~ .+release$) OR (NOT (branch IN (master,develop)) AND commit_message =~ ci_docker)
before_cache:
  # cleanup gradle caches
  - rm -f  ${HOME}/.gradle/caches/modules-2/modules-2.lock
  - rm -fr ${HOME}/.gradle/caches/*/plugin-resolution/
cache:
  bundler: true
  directories:
    # caches gradle caches
    - ${HOME}/.gradle/caches/
    - ${HOME}/.gradle/wrapper/
    # cache ui dependencies
    - ui/main/nodes_modules
    # cache cypress dependencies and binary
    - src/test/cypress/node_modules
    - ${HOME}/.cache/Cypress/
    - ${HOME}/.sdkman
