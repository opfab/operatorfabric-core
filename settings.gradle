pluginManagement {
    repositories {
        gradlePluginPortal()
        jcenter()
        mavenLocal()
        mavenCentral()
        maven { url "https://repo1.maven.org/maven2" }
        maven { url "https://repo.spring.io/release" }
        maven { url "https://repo.spring.io/snapshot" }
        maven { url "https://repo.spring.io/milestone" }
        maven { url "https://repo.spring.io/libs-snapshot" }
        maven { url "https://repo.spring.io/libs-milestone" }
        maven { url "https://maven.eveoh.nl/content/repositories/releases" }
        maven { url "https://artifacts.elastic.co/maven/"}
        maven { url "https://plugins.gradle.org/m2/" }
    }
    resolutionStrategy {
        eachPlugin {
            if (requested.id.id == 'org.springframework.boot') {
                useModule("org.springframework.boot:spring-boot-gradle-plugin:${requested.version}")
            }
        }
    }
}
rootProject.name = 'operator-fabric'

include 'tools:swagger-spring-generators'
include 'tools:generic:utilities'
include 'tools:spring:spring-utilities'
include 'tools:spring:spring-mongo-utilities'
include 'tools:spring:aop-process'
include 'tools:spring:spring-oauth2-utilities'
include 'tools:spring:spring-test-utilities'
include 'tools:generic:test-utilities'
include 'client:businessconfig'
include 'client:cards'
include 'client:users'
include 'services:core:businessconfig'
include 'services:core:cards-publication'
include 'services:core:cards-consultation'
include 'services:core:users'
include 'web-ui'
include 'ui:main'
include 'externalApp'
include 'clientApp'
include 'karateTests'
include 'cypressTests'

project(':client:businessconfig').name = 'businessconfig-client-data'
project(':client:cards').name = 'cards-client-data'
project(':client:users').name = 'users-client-data'
project(':services:core:businessconfig').name = 'businessconfig-business-service'
project(':services:core:users').name = 'users-business-service'
project(':services:core:cards-publication').name = 'cards-publication-business-service'
project(':services:core:cards-consultation').name = 'cards-consultation-business-service'
project(':web-ui').name = 'web-ui'
project(':ui:main').name = 'main-user-interface'
project(':externalApp').projectDir = file('src/test/externalApp')
project(':clientApp').projectDir = file('src/test/clientApp')
project(':karateTests').projectDir = file('src/test/api/karate')
project(':cypressTests').projectDir = file('src/test/cypress')

//we check if the modules have gradle configuration files
rootProject.children.each { project ->
    project.buildFileName = "${project.name}.gradle"
    assert project.projectDir.isDirectory()
    assert project.buildFile.exists()
    assert project.buildFile.isFile()
}

